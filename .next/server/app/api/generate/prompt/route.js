/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate/prompt/route";
exports.ids = ["app/api/generate/prompt/route"];
exports.modules = {

/***/ "(rsc)/./app/api/generate/prompt/route.ts":
/*!******************************************!*\
  !*** ./app/api/generate/prompt/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var everart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! everart */ \"(rsc)/./node_modules/everart/dist/index.js\");\n/* harmony import */ var everart__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(everart__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_db_astra__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/db/astra */ \"(rsc)/./app/lib/db/astra.ts\");\n\n\n\n// Initialize EverArt client\nconst everartApiKey = process.env.EVERART_API_KEY;\nif (!everartApiKey) {\n    throw new Error('EVERART_API_KEY environment variable is required');\n}\nconst everart = new (everart__WEBPACK_IMPORTED_MODULE_1___default())(everartApiKey);\n// Style prefix for consistent image generation\n// const PROMPT_PREFIX = \"Create a cute, retro-style creature in authentic low-resolution pixel art, \" +\n// \"reminiscent of classic SNES RPGs. The character should have large, sparkly eyes, chunky pixel shading, \" +\n// \"and deliberately limited color palette. The overall style should embrace the constraints of 16-bit era graphics with visible, \" +\n// \"chunky pixels and that nostalgic game aesthetic.\";\nconst PROMPT_PREFIX = \"Kawaii pixel art: Adorable chimera creature, ultra low-resolutionpixel 16-bit style. \" + \"Extremely pixelated NES/SNES aesthetic, chunky dithering patterns, and high contrast. \" + \"Rainbow gradient background.\";\n// Local fallback image that doesn't depend on external services\nconst FALLBACK_IMAGE_URL = \"/images/codebeast-placeholder.png\";\n// Helper function to clean the language string\nfunction cleanLanguagesString(rawLangString) {\n    if (!rawLangString) return '';\n    // Remove prefix like \"languages:\", brackets [], and single quotes '\n    return rawLangString.replace(/^languages:\\s*\\[|\\]|'/g, '').trim();\n}\n// Helper function to clean the GitHub URL\nfunction cleanGithubUrl(rawUrl, username) {\n    const fallbackUrl = `https://github.com/${username.toLowerCase()}`;\n    if (!rawUrl) {\n        console.warn(`cleanGithubUrl: Raw URL missing. Returning fallback: ${fallbackUrl}`);\n        return fallbackUrl;\n    }\n    const githubPrefix = 'https://github.com/';\n    const index = rawUrl.indexOf(githubPrefix);\n    if (index !== -1) {\n        const extractedUrl = rawUrl.substring(index);\n        console.log(`cleanGithubUrl: Extracted \"${extractedUrl}\" from \"${rawUrl}\"`);\n        return extractedUrl;\n    }\n    console.warn(`cleanGithubUrl: Unexpected format for rawUrl: \"${rawUrl}\". Returning fallback: ${fallbackUrl}`);\n    return fallbackUrl;\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        console.log(\"API Route: Received request body:\", body);\n        const { username } = body;\n        const normalizedUsername = username.toLowerCase(); // Ensure we use normalized consistently\n        if (!username) {\n            console.error(\"Username is missing from request body\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Username is required\"\n            }, {\n                status: 400\n            });\n        }\n        // First, check if we have existing user details\n        const existingDetails = await (0,_lib_db_astra__WEBPACK_IMPORTED_MODULE_2__.getUserDetails)(username);\n        if (existingDetails) {\n            console.log(\"API Route: Using existing user details from DB\");\n            // Clean languages from DB details\n            const cleanedLanguages = cleanLanguagesString(existingDetails.languages);\n            const cleanedGithubUrl = cleanGithubUrl(existingDetails.githubUrl, username);\n            const dataToLog = {\n                ...existingDetails,\n                languages: cleanedLanguages,\n                githubUrl: cleanedGithubUrl,\n                repoCount: existingDetails.repoCount ?? 30,\n                animalSelection: existingDetails.animalSelection // Pass actual value (could be undefined)\n            };\n            console.log(\"API Route: Data before EverArt (DB Cache):\", JSON.stringify(dataToLog, null, 2));\n            // Generate new image using existing prompt\n            try {\n                const fullPrompt = PROMPT_PREFIX + existingDetails.prompt;\n                console.log(\"Full prompt for existing user:\", fullPrompt);\n                const generations = await everart.v1.generations.create('5000', fullPrompt, 'txt2img', {\n                    imageCount: 1,\n                    height: 512,\n                    width: 512\n                });\n                if (!generations || generations.length === 0) {\n                    throw new Error('No generations returned from EverArt');\n                }\n                const result = await everart.v1.generations.fetchWithPolling(generations[0].id);\n                console.log(\"EverArt generation result (cached path):\", result);\n                const finalImageUrl = result.image_url || FALLBACK_IMAGE_URL;\n                // --- Save/Update the image record in the DB --- \n                if (result.image_url) {\n                    try {\n                        console.log(`API Route: Upserting image for ${normalizedUsername} (cached path)`);\n                        await (0,_lib_db_astra__WEBPACK_IMPORTED_MODULE_2__.upsertImage)({\n                            username: normalizedUsername,\n                            image_url: finalImageUrl,\n                            created_at: new Date().toISOString()\n                        });\n                        console.log(`API Route: Upsert successful for ${normalizedUsername}`);\n                    } catch (dbError) {\n                        console.error(`API Route: Failed to upsert image for ${normalizedUsername} (cached path):`, dbError);\n                    // Decide if failure to save should prevent returning success to user?\n                    // For now, we'll still return the image URL but log the error.\n                    }\n                }\n                // --- End Save/Update ---\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    languages: cleanedLanguages,\n                    prompt: existingDetails.prompt,\n                    githubUrl: cleanedGithubUrl,\n                    repoCount: dataToLog.repoCount,\n                    animalSelection: dataToLog.animalSelection,\n                    imageUrl: finalImageUrl,\n                    status: {\n                        langflow: \"cached\",\n                        everart: result.image_url ? \"success\" : \"error\"\n                    }\n                });\n            } catch (everartError) {\n                console.error(\"Error calling EverArt API:\", everartError);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    languages: cleanedLanguages,\n                    prompt: existingDetails.prompt,\n                    githubUrl: cleanedGithubUrl,\n                    repoCount: dataToLog.repoCount,\n                    animalSelection: dataToLog.animalSelection,\n                    imageUrl: FALLBACK_IMAGE_URL,\n                    status: {\n                        langflow: \"cached\",\n                        everart: \"error\"\n                    }\n                });\n            }\n        }\n        // Check if environment variables are set\n        if (!process.env.LANGFLOW_BASE_URL || !process.env.LANGFLOW_FLOW_ID || !process.env.EVERART_API_KEY) {\n            console.error(\"Missing required environment variables:\", {\n                LANGFLOW_BASE_URL: !!process.env.LANGFLOW_BASE_URL,\n                LANGFLOW_FLOW_ID: !!process.env.LANGFLOW_FLOW_ID,\n                EVERART_API_KEY: !!process.env.EVERART_API_KEY\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Server configuration error\"\n            }, {\n                status: 500\n            });\n        }\n        // Call Langflow API directly\n        const langflowUrl = `${process.env.LANGFLOW_BASE_URL}/api/v1/run/${process.env.LANGFLOW_FLOW_ID}`;\n        console.log(\"Calling Langflow at:\", langflowUrl);\n        try {\n            // First, return initial data without image\n            const response = await fetch(langflowUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    input: {\n                        text: normalizedUsername // Use normalized username\n                    }\n                })\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Langflow API error:\", {\n                    status: response.status,\n                    statusText: response.statusText,\n                    error: errorText,\n                    url: langflowUrl\n                });\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Failed to generate prompt: ${response.status} ${response.statusText}`\n                }, {\n                    status: response.status\n                });\n            }\n            const langflowResponseData = await response.json();\n            console.log(\"API Route: Full Langflow response:\", JSON.stringify(langflowResponseData, null, 2));\n            // Extract the message from the Langflow response structure\n            let rawMessage;\n            if (langflowResponseData?.outputs?.[0]?.outputs?.[0]?.messages?.[0]?.message) {\n                rawMessage = langflowResponseData.outputs[0].outputs[0].messages[0].message;\n            }\n            if (!rawMessage) {\n                console.error(\"Could not find message in response. Full response:\", langflowResponseData);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Could not extract message from response\"\n                }, {\n                    status: 500\n                });\n            }\n            // Parse the pipe-delimited fields\n            const [rawLanguages, prompt, rawGithubUrl] = rawMessage.split('|').map((field)=>field.trim());\n            // Clean languages from Langflow details\n            const cleanedLanguages = cleanLanguagesString(rawLanguages);\n            const cleanedGithubUrl = cleanGithubUrl(rawGithubUrl, username);\n            // --- Log new data --- \n            const newDataToLog = {\n                languages: cleanedLanguages,\n                prompt,\n                githubUrl: cleanedGithubUrl,\n                repoCount: 30,\n                animalSelection: undefined // Explicitly undefined as Langflow doesn't provide it\n            };\n            console.log(\"API Route: Data before EverArt (Langflow):\", JSON.stringify(newDataToLog, null, 2));\n            // --- End Log ---\n            // Generate image using EverArt SDK\n            try {\n                const fullPrompt = PROMPT_PREFIX + prompt;\n                console.log(\"Full prompt for new user:\", fullPrompt);\n                const generations = await everart.v1.generations.create('5000', fullPrompt, 'txt2img', {\n                    imageCount: 1,\n                    height: 512,\n                    width: 512\n                });\n                if (!generations || generations.length === 0) {\n                    throw new Error('No generations returned from EverArt');\n                }\n                // Wait for the first generation to complete\n                const result = await everart.v1.generations.fetchWithPolling(generations[0].id);\n                console.log(\"EverArt generation result (new path):\", result);\n                const finalImageUrl = result.image_url || FALLBACK_IMAGE_URL;\n                // --- Save/Update the image record in the DB --- \n                if (result.image_url) {\n                    try {\n                        console.log(`API Route: Upserting image for ${normalizedUsername} (new path)`);\n                        await (0,_lib_db_astra__WEBPACK_IMPORTED_MODULE_2__.upsertImage)({\n                            username: normalizedUsername,\n                            image_url: finalImageUrl,\n                            created_at: new Date().toISOString()\n                        });\n                        console.log(`API Route: Upsert successful for ${normalizedUsername}`);\n                    } catch (dbError) {\n                        console.error(`API Route: Failed to upsert image for ${normalizedUsername} (new path):`, dbError);\n                    // Log error but continue\n                    }\n                }\n                // --- End Save/Update ---\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    languages: cleanedLanguages,\n                    prompt,\n                    githubUrl: cleanedGithubUrl,\n                    repoCount: newDataToLog.repoCount,\n                    animalSelection: newDataToLog.animalSelection,\n                    imageUrl: finalImageUrl,\n                    username: normalizedUsername,\n                    status: {\n                        langflow: \"success\",\n                        everart: result.image_url ? \"success\" : \"error\"\n                    }\n                });\n            } catch (everartError) {\n                console.error(\"Error calling EverArt API:\", everartError);\n                // Continue with a placeholder image if EverArt fails\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    languages: cleanedLanguages,\n                    prompt,\n                    githubUrl: cleanedGithubUrl,\n                    repoCount: newDataToLog.repoCount,\n                    animalSelection: newDataToLog.animalSelection,\n                    imageUrl: FALLBACK_IMAGE_URL,\n                    username: normalizedUsername,\n                    status: {\n                        langflow: \"success\",\n                        everart: \"error\"\n                    }\n                });\n            }\n        } catch (langflowError) {\n            console.error(\"Error calling Langflow API:\", langflowError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to communicate with Langflow API\",\n                username: normalizedUsername,\n                status: {\n                    langflow: \"error\",\n                    everart: \"not_started\"\n                }\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Error in API route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate prompt\",\n            status: {\n                langflow: \"error\",\n                everart: \"not_started\"\n            }\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate/prompt/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/db/astra.ts":
/*!*****************************!*\
  !*** ./app/lib/db/astra.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllImages: () => (/* binding */ getAllImages),\n/* harmony export */   getAstraClient: () => (/* binding */ getAstraClient),\n/* harmony export */   getImageByUsername: () => (/* binding */ getImageByUsername),\n/* harmony export */   getUserDetails: () => (/* binding */ getUserDetails),\n/* harmony export */   upsertImage: () => (/* binding */ upsertImage)\n/* harmony export */ });\n/* harmony import */ var _datastax_astra_db_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @datastax/astra-db-ts */ \"(rsc)/./node_modules/@datastax/astra-db-ts/dist/index.js\");\n/* harmony import */ var _datastax_astra_db_ts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_datastax_astra_db_ts__WEBPACK_IMPORTED_MODULE_0__);\n\n// Database client singleton\nlet astraClient = null;\nasync function getAstraClient() {\n    if (astraClient === null) {\n        const endpoint = process.env.ASTRA_DB_ENDPOINT;\n        const token = process.env.ASTRA_DB_APPLICATION_TOKEN;\n        if (!endpoint || !token) {\n            throw new Error(\"Missing required Astra DB configuration\");\n        }\n        try {\n            console.log(\"Connecting to Astra DB with endpoint:\", endpoint);\n            const client = new _datastax_astra_db_ts__WEBPACK_IMPORTED_MODULE_0__.DataAPIClient(token);\n            astraClient = client.db(endpoint);\n            console.log(\"Successfully connected to Astra DB\");\n        } catch (error) {\n            console.error(\"Failed to connect to Astra DB:\", error);\n            throw error;\n        }\n    }\n    return astraClient;\n}\n// Collection getters\nasync function getImagesCollection() {\n    const client = await getAstraClient();\n    return client.collection(\"images\");\n}\nasync function getUserDetailsCollection() {\n    const client = await getAstraClient();\n    return client.collection(\"github_user_details\");\n}\n// Image operations\nasync function getAllImages() {\n    try {\n        console.log(\"getAllImages - Fetching images collection\");\n        const collection = await getImagesCollection();\n        console.log(\"getAllImages - Finding all records\");\n        const records = await collection.find().toArray();\n        console.log(`getAllImages - Found ${records.length} records`);\n        return records;\n    } catch (error) {\n        console.error(\"getAllImages - Error:\", error);\n        throw error;\n    }\n}\nasync function getImageByUsername(username) {\n    try {\n        const normalizedUsername = username.toLowerCase();\n        console.log(`getImageByUsername - Finding image for ${normalizedUsername}`);\n        const collection = await getImagesCollection();\n        const records = await collection.find({\n            username: normalizedUsername\n        }).toArray();\n        console.log(`getImageByUsername - Found ${records.length} records`);\n        if (!records.length) {\n            return null;\n        }\n        // Return the most recent image if multiple exist\n        return records[0];\n    } catch (error) {\n        console.error(\"getImageByUsername - Error:\", error);\n        throw error;\n    }\n}\nasync function upsertImage(imageData) {\n    try {\n        const normalizedUsername = imageData.username.toLowerCase();\n        console.log(`upsertImage - Processing image for ${normalizedUsername}`);\n        const collection = await getImagesCollection();\n        // Find existing record\n        const existingRecord = await collection.findOne({\n            username: normalizedUsername\n        });\n        const imageRecord = {\n            ...imageData,\n            username: normalizedUsername\n        };\n        let result;\n        if (existingRecord) {\n            // Update existing record\n            console.log(`upsertImage - Updating existing record: ${existingRecord._id}`);\n            result = await collection.updateOne({\n                _id: existingRecord._id\n            }, {\n                $set: imageRecord\n            });\n        } else {\n            // Insert new record\n            console.log(\"upsertImage - Creating new record\");\n            result = await collection.insertOne(imageRecord);\n        }\n        console.log(\"upsertImage - Operation result:\", result);\n        return result;\n    } catch (error) {\n        console.error(\"upsertImage - Error:\", error);\n        throw error;\n    }\n}\n// User details operations - Reverted to parse body_blob\nasync function getUserDetails(username) {\n    console.log(`DB Service: Fetching user details for username: ${username}`);\n    const normalizedUsername = username.toLowerCase();\n    try {\n        const userDetailsCollection = await getUserDetailsCollection();\n        // Find the document based on session_id, only fetch necessary fields\n        const record = await userDetailsCollection.findOne({\n            session_id: normalizedUsername\n        }, {\n            projection: {\n                _id: 1,\n                session_id: 1,\n                body_blob: 1\n            }\n        } // Fetch blob and ids\n        );\n        console.log(`DB Service: Found record (using session_id):`, record);\n        if (record?.body_blob) {\n            try {\n                const bodyBlob = JSON.parse(record.body_blob);\n                console.log(`DB Service: Parsed body_blob:`, bodyBlob);\n                // Assuming structure is { type: 'ai', data: { content: 'lang|prompt|url' } } \n                // AND potentially other fields like repoCount, animalSelection under data\n                if (bodyBlob.type === 'ai' && bodyBlob.data?.content) {\n                    const content = bodyBlob.data.content;\n                    const [languages, prompt, githubUrl] = content.split('|').map((field)=>field.trim());\n                    // Extract potential extra fields from bodyBlob.data\n                    const repoCount = bodyBlob.data.repoCount;\n                    const animalSelection = bodyBlob.data.animalSelection;\n                    const userDetails = {\n                        _id: record._id,\n                        session_id: record.session_id,\n                        username: record.session_id,\n                        languages,\n                        prompt,\n                        githubUrl,\n                        repoCount,\n                        animalSelection\n                    };\n                    console.log(`DB Service: Parsed user details from blob:`, userDetails);\n                    return userDetails;\n                } else {\n                    console.warn(`DB Service: body_blob found but content format unexpected for ${normalizedUsername}`);\n                }\n            } catch (parseError) {\n                console.error(`DB Service: Error parsing body_blob for ${normalizedUsername}:`, parseError);\n            }\n        }\n        console.log(`DB Service: No valid user details found or parsed for ${normalizedUsername}`);\n        return null;\n    } catch (error) {\n        console.error(\"DB Service: Error fetching user details:\", error);\n        return null;\n    }\n}\n// Export the client getter for advanced use cases\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/db/astra.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch sync recursive":
/*!*****************************************************************!*\
  !*** ./node_modules/@datastax/astra-db-ts/dist/api/fetch/ sync ***!
  \*****************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/@datastax/astra-db-ts/dist/api/fetch sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate%2Fprompt%2Froute&page=%2Fapi%2Fgenerate%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate%2Fprompt%2Froute&page=%2Fapi%2Fgenerate%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_david_gilardi_codebeasts_app_api_generate_prompt_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate/prompt/route.ts */ \"(rsc)/./app/api/generate/prompt/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate/prompt/route\",\n        pathname: \"/api/generate/prompt\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate/prompt/route\"\n    },\n    resolvedPagePath: \"/Users/david.gilardi/codebeasts/app/api/generate/prompt/route.ts\",\n    nextConfigOutput,\n    userland: _Users_david_gilardi_codebeasts_app_api_generate_prompt_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZSUyRnByb21wdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZ2VuZXJhdGUlMkZwcm9tcHQlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZnZW5lcmF0ZSUyRnByb21wdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmRhdmlkLmdpbGFyZGklMkZjb2RlYmVhc3RzJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmRhdmlkLmdpbGFyZGklMkZjb2RlYmVhc3RzJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNnQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2RhdmlkLmdpbGFyZGkvY29kZWJlYXN0cy9hcHAvYXBpL2dlbmVyYXRlL3Byb21wdC9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGUvcHJvbXB0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ2VuZXJhdGUvcHJvbXB0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5lcmF0ZS9wcm9tcHQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZGF2aWQuZ2lsYXJkaS9jb2RlYmVhc3RzL2FwcC9hcGkvZ2VuZXJhdGUvcHJvbXB0L3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate%2Fprompt%2Froute&page=%2Fapi%2Fgenerate%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@datastax","vendor-chunks/safe-stable-stringify","vendor-chunks/uuidv7","vendor-chunks/fs-extra","vendor-chunks/uuid","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/everart","vendor-chunks/call-bind-apply-helpers","vendor-chunks/graceful-fs","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/jsonfile","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/axios","vendor-chunks/universalify","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate%2Fprompt%2Froute&page=%2Fapi%2Fgenerate%2Fprompt%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate%2Fprompt%2Froute.ts&appDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdavid.gilardi%2Fcodebeasts&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();