{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-KqEwz",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-P7BHv",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-KqEwz{œdataTypeœ:œPromptœ,œidœ:œPrompt-KqEwzœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-P7BHv{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-P7BHvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-KqEwz",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-KqEwzœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-P7BHv",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-P7BHvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-JnhGu",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "github_username",
            "id": "Prompt-KqEwz",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-JnhGu{œdataTypeœ:œChatInputœ,œidœ:œChatInput-JnhGuœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-KqEwz{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-KqEwzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-JnhGu",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-JnhGuœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-KqEwz",
        "targetHandle": "{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-KqEwzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-pFz9x",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-Tq27d",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-pFz9x{œdataTypeœ:œPromptœ,œidœ:œPrompt-pFz9xœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-Tq27d{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-Tq27dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-pFz9x",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-pFz9xœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-Tq27d",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-Tq27dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-JnhGu",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "github_username",
            "id": "Prompt-pFz9x",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-JnhGu{œdataTypeœ:œChatInputœ,œidœ:œChatInput-JnhGuœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-pFz9x{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-pFz9xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-JnhGu",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-JnhGuœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-pFz9x",
        "targetHandle": "{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-pFz9xœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-u9xP0",
            "name": "false_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "false",
            "id": "Prompt-OzTmx",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ConditionalRouter-u9xP0{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-u9xP0œ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}-Prompt-OzTmx{œfieldNameœ:œfalseœ,œidœ:œPrompt-OzTmxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConditionalRouter-u9xP0",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-u9xP0œ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OzTmx",
        "targetHandle": "{œfieldNameœ:œfalseœ,œidœ:œPrompt-OzTmxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-N9FGM",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-u9xP0",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Memory-N9FGM{œdataTypeœ:œMemoryœ,œidœ:œMemory-N9FGMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-u9xP0{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-u9xP0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Memory-N9FGM",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-N9FGMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-u9xP0",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-u9xP0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-N9FGM",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-u9xP0",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Memory-N9FGM{œdataTypeœ:œMemoryœ,œidœ:œMemory-N9FGMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-u9xP0{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-u9xP0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Memory-N9FGM",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-N9FGMœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-u9xP0",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-u9xP0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "AstraDBChatMemory",
            "id": "AstraDBChatMemory-CmxPu",
            "name": "memory",
            "output_types": [
              "Memory"
            ]
          },
          "targetHandle": {
            "fieldName": "memory",
            "id": "Memory-N9FGM",
            "inputTypes": [
              "Memory"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-AstraDBChatMemory-CmxPu{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-CmxPuœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}-Memory-N9FGM{œfieldNameœ:œmemoryœ,œidœ:œMemory-N9FGMœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "AstraDBChatMemory-CmxPu",
        "sourceHandle": "{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-CmxPuœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}",
        "target": "Memory-N9FGM",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œMemory-N9FGMœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "AstraDBChatMemory",
            "id": "AstraDBChatMemory-CmxPu",
            "name": "memory",
            "output_types": [
              "Memory"
            ]
          },
          "targetHandle": {
            "fieldName": "memory",
            "id": "StoreMessage-8Ia2V",
            "inputTypes": [
              "Memory"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-AstraDBChatMemory-CmxPu{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-CmxPuœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}-StoreMessage-8Ia2V{œfieldNameœ:œmemoryœ,œidœ:œStoreMessage-8Ia2Vœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "AstraDBChatMemory-CmxPu",
        "sourceHandle": "{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-CmxPuœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}",
        "target": "StoreMessage-8Ia2V",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œStoreMessage-8Ia2Vœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-bA75O",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "StoreMessage-8Ia2V",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatOutput-bA75O{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-bA75Oœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-StoreMessage-8Ia2V{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-8Ia2Vœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatOutput-bA75O",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-bA75Oœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StoreMessage-8Ia2V",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-8Ia2Vœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-Lb8j8",
            "name": "structured_output_dataframe",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "df",
            "id": "ParseDataFrame-wnVJC",
            "inputTypes": [
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-StructuredOutput-Lb8j8{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-Lb8j8œ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}-ParseDataFrame-wnVJC{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-wnVJCœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "StructuredOutput-Lb8j8",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-Lb8j8œ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParseDataFrame-wnVJC",
        "targetHandle": "{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-wnVJCœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-6zpqv",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "template",
            "id": "ParseDataFrame-wnVJC",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextOutput-6zpqv{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-6zpqvœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseDataFrame-wnVJC{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-wnVJCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextOutput-6zpqv",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-6zpqvœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ParseDataFrame-wnVJC",
        "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-wnVJCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParseDataFrame",
            "id": "ParseDataFrame-wnVJC",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-bA75O",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ParseDataFrame-wnVJC{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-wnVJCœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-bA75O{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-bA75Oœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ParseDataFrame-wnVJC",
        "sourceHandle": "{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-wnVJCœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-bA75O",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-bA75Oœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-gJcud",
            "name": "structured_output_dataframe",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "df",
            "id": "ParseDataFrame-DJZTQ",
            "inputTypes": [
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-StructuredOutput-gJcud{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-gJcudœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}-ParseDataFrame-DJZTQ{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-DJZTQœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "StructuredOutput-gJcud",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-gJcudœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParseDataFrame-DJZTQ",
        "targetHandle": "{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-DJZTQœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-6zpqv",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "template",
            "id": "ParseDataFrame-DJZTQ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextOutput-6zpqv{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-6zpqvœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseDataFrame-DJZTQ{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-DJZTQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextOutput-6zpqv",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-6zpqvœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ParseDataFrame-DJZTQ",
        "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-DJZTQœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParseDataFrame",
            "id": "ParseDataFrame-DJZTQ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-tkP56",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ParseDataFrame-DJZTQ{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-DJZTQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-tkP56{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-tkP56œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ParseDataFrame-DJZTQ",
        "sourceHandle": "{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-DJZTQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-tkP56",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-tkP56œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-YUTVr",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-Tq27d",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ComposioAPI-YUTVr{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-YUTVrœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Agent-Tq27d{œfieldNameœ:œtoolsœ,œidœ:œAgent-Tq27dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ComposioAPI-YUTVr",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-YUTVrœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-Tq27d",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-Tq27dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-aya9W",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-Lb8j8",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIModel-aya9W{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-aya9Wœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-Lb8j8{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-Lb8j8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIModel-aya9W",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-aya9Wœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-Lb8j8",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-Lb8j8œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-aya9W",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-gJcud",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIModel-aya9W{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-aya9Wœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-gJcud{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-gJcudœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIModel-aya9W",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-aya9Wœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-gJcud",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-gJcudœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-feuoE",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-Tq27d",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ComposioAPI-feuoE{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-feuoEœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Agent-Tq27d{œfieldNameœ:œtoolsœ,œidœ:œAgent-Tq27dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ComposioAPI-feuoE",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-feuoEœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-Tq27d",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-Tq27dœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-OzTmx",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-GFSV6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-OzTmx{œdataTypeœ:œPromptœ,œidœ:œPrompt-OzTmxœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-GFSV6{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-OzTmx",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OzTmxœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-GFSV6",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-Tq27d",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-GFSV6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-Tq27d{œdataTypeœ:œAgentœ,œidœ:œAgent-Tq27dœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-GFSV6{œfieldNameœ:œtoolsœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-Tq27d",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-Tq27dœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-GFSV6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-GFSV6",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-Lb8j8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Agent-GFSV6{œdataTypeœ:œAgentœ,œidœ:œAgent-GFSV6œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-Lb8j8{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-Lb8j8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Agent-GFSV6",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-GFSV6œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-Lb8j8",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-Lb8j8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-GFSV6",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-dUtfS",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-GFSV6{œdataTypeœ:œAgentœ,œidœ:œAgent-GFSV6œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-dUtfS{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-dUtfSœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-GFSV6",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-GFSV6œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-dUtfS",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-dUtfSœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-u9xP0",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-gJcud",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ConditionalRouter-u9xP0{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-u9xP0œ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-gJcud{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-gJcudœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConditionalRouter-u9xP0",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-u9xP0œ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-gJcud",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-gJcudœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-P7BHv",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-GFSV6",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-P7BHv{œdataTypeœ:œAgentœ,œidœ:œAgent-P7BHvœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-GFSV6{œfieldNameœ:œtoolsœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-P7BHv",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-P7BHvœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-GFSV6",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-JnhGu",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-GFSV6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-JnhGu{œdataTypeœ:œChatInputœ,œidœ:œChatInput-JnhGuœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-GFSV6{œfieldNameœ:œinput_valueœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-JnhGu",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-JnhGuœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-GFSV6",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-GFSV6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "URLComponent",
            "id": "URLComponent-VkQbX",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-P7BHv",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__URLComponent-VkQbX{œdataTypeœ:œURLComponentœ,œidœ:œURLComponent-VkQbXœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-P7BHv{œfieldNameœ:œtoolsœ,œidœ:œAgent-P7BHvœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "URLComponent-VkQbX",
        "sourceHandle": "{œdataTypeœ:œURLComponentœ,œidœ:œURLComponent-VkQbXœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-P7BHv",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-P7BHvœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-JnhGu",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "sonicdmg"
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-JnhGu",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": -2820.643209760557,
          "y": 545.0191044204128
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-bA75O",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-bA75O",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 2798.3897735981645,
          "y": 552.8955348120011
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
          "display_name": "Structured Output",
          "id": "StructuredOutput-Lb8j8",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "display_name": "Structured Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "llm",
              "input_value",
              "system_prompt",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Structured Output",
                "hidden": null,
                "method": "build_structured_output",
                "name": "structured_output",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": false,
                "method": "as_dataframe",
                "name": "structured_output_dataframe",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pydantic import BaseModel, Field, create_model\nfrom trustcall import create_extractor\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.table import EditMode\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Format Instructions\",\n            info=\"The instructions to the language model for formatting the output.\",\n            value=(\n                \"You are an AI system designed to extract structured information from unstructured text.\"\n                \"Given the input_text, return a JSON object with predefined keys based on the expected structure.\"\n                \"Extract values accurately and format them according to the specified type \"\n                \"(e.g., string, integer, float, date).\"\n                \"If a value is missing or cannot be determined, return a default \"\n                \"(e.g., null, 0, or 'N/A').\"\n                \"If multiple instances of the expected structure exist within the input_text, \"\n                \"stream each as a separate JSON object.\"\n            ),\n            required=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            # TODO: remove deault value\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Indicate the data type of the output field (e.g., str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n            ],\n            value=[\n                {\n                    \"name\": \"field\",\n                    \"description\": \"description of field\",\n                    \"type\": \"str\",\n                    \"multiple\": \"False\",\n                }\n            ],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"[Deprecated] Always set to True\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"structured_output\",\n            display_name=\"Structured Output\",\n            method=\"build_structured_output\",\n        ),\n        Output(\n            name=\"structured_output_dataframe\",\n            display_name=\"DataFrame\",\n            method=\"as_dataframe\",\n        ),\n    ]\n\n    def build_structured_output_base(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n\n        output_model = create_model(\n            schema_name,\n            __doc__=f\"A list of {schema_name}.\",\n            objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n        )\n\n        try:\n            llm_with_structured_output = create_extractor(self.llm, tools=[output_model])\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        result = get_chat_result(\n            runnable=llm_with_structured_output,\n            system_message=self.system_prompt,\n            input_value=self.input_value,\n            config=config_dict,\n        )\n        if isinstance(result, BaseModel):\n            result = result.model_dump()\n        if responses := result.get(\"responses\"):\n            result = responses[0].model_dump()\n        if result and \"objects\" in result:\n            return result[\"objects\"]\n\n        return result\n\n    def build_structured_output(self) -> Data:\n        output = self.build_structured_output_base()\n\n        return Data(text_key=\"results\", data={\"results\": output})\n\n    def as_dataframe(self) -> DataFrame:\n        output = self.build_structured_output_base()\n        if isinstance(output, list):\n            return DataFrame(data=output)\n        return DataFrame(data=[output])\n"
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input Message",
                "dynamic": false,
                "info": "The input message to the language model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "llm": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Language Model",
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "llm",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "multiple": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Generate Multiple",
                "dynamic": false,
                "info": "[Deprecated] Always set to True",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "multiple",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "output_schema": {
                "_input_type": "TableInput",
                "advanced": false,
                "display_name": "Output Schema",
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "is_list": true,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "output_schema",
                "placeholder": "",
                "required": true,
                "show": true,
                "table_icon": "Table",
                "table_schema": {
                  "columns": [
                    {
                      "default": "field",
                      "description": "Specify the name of the output field.",
                      "disable_edit": false,
                      "display_name": "Name",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "name",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "description of field",
                      "description": "Describe the purpose of the output field.",
                      "disable_edit": false,
                      "display_name": "Description",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "description",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "str",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                      "disable_edit": false,
                      "display_name": "Type",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "type",
                      "options": [
                        "str",
                        "int",
                        "float",
                        "bool",
                        "dict"
                      ],
                      "sortable": true,
                      "type": "str"
                    }
                  ]
                },
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": [
                  {
                    "description": "A list of coding languages used by GitHub profile",
                    "multiple": "True",
                    "name": "coding_languages",
                    "type": "text"
                  },
                  {
                    "description": "The generated prompt response",
                    "multiple": "False",
                    "name": "prompt",
                    "type": "text"
                  },
                  {
                    "description": "The GitHub user name URL",
                    "multiple": "False",
                    "name": "github_user_name_url",
                    "type": "text"
                  },
                  {
                    "description": "The number of GitHub repositories",
                    "multiple": "False",
                    "name": "num_repositories",
                    "type": "text"
                  },
                  {
                    "description": "A list of coding language / animal pairs.\n\nExample:\n[\n  'Parrot',            'for Julia',\n  'Eagle',             'for Assembly',\n  'Owl',               'for TypeScript',\n  'Goat',              'for C',\n  'Cat',               'for Kotlin',\n  'Rhinoceros Beetle', 'for Haskell',\n  'Butterfly',         'for Java',\n  'Rhinoceros',        'for JavaScript'\n]",
                    "multiple": false,
                    "name": "animal_selection",
                    "type": "list"
                  },
                  {
                    "description": "GitHub achievements the user has earned",
                    "multiple": "True",
                    "name": "github_achievements",
                    "type": "text"
                  }
                ]
              },
              "schema_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Schema Name",
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "schema_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Format Instructions",
                "dynamic": false,
                "info": "The instructions to the language model for formatting the output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an AI system designed to extract structured information from unstructured text.Given the input_text, return a JSON object with predefined keys based on the expected structure.Extract values accurately and format them according to the specified type (e.g., string, integer, float, date).If a value is missing or cannot be determined, return a default (e.g., null, 0, or 'N/A').If multiple instances of the expected structure exist within the input_text, stream each as a separate JSON object."
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "StructuredOutput"
        },
        "dragging": false,
        "id": "StructuredOutput-Lb8j8",
        "measured": {
          "height": 529,
          "width": 320
        },
        "position": {
          "x": 1542.6367546187375,
          "y": -252.1700277569327
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent",
          "id": "Agent-P7BHv",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "GitHub Details Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1-mini"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Use the input name {github_username} to get information on the user's GitHub account, repository and coding languages used.\nProvide the GitHub username, number of repositories, and their coding languages used.\n\nUse https://api.github.com/users/{github_username} to get the number of public_repos and the user's url values.\nUse the Composio tool to get repo language details."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "input_value": {
                        "default": "",
                        "description": "The input provided by the user for the agent to process.",
                        "title": "Input Value",
                        "type": "string"
                      },
                      "order": {
                        "default": "Ascending",
                        "description": "Order of the messages.",
                        "enum": [
                          "Ascending",
                          "Descending"
                        ],
                        "title": "Order",
                        "type": "string"
                      }
                    },
                    "description": "An agent responsible for getting GitHub user profile details",
                    "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.",
                    "display_name": "message_response",
                    "name": "github_details_agent",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "Agent"
                    ]
                  }
                ]
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-P7BHv",
        "measured": {
          "height": 750,
          "width": 320
        },
        "position": {
          "x": 170.52607078462117,
          "y": -1159.2054097115029
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-KqEwz",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "github_username"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Agent Instructions",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "github_username": {
                "advanced": false,
                "display_name": "github_username",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "github_username",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Use the input name {github_username} to get information on the user's GitHub account, number of repositories, and achievements.\n\nUse the tools provided to search https://api.github.com/users/{github_username} to get the number of public_repos, the user's url value, and their achievements.\nFor example, the url should look like the following: \"https://api.github.com/users/sonicdmg\"\n\nImportant!!\n- The number of public_repos and user's url data coming from https://api.github.com/users/{github_username} is authoritative.\n- Do not hallucinate github details. Only use the information provided from GitHub to create results.\n- If you get a 404 error for the user, return \"GitHub user does not exist\"\n- If for a given repo, you get the message \"No language detected\" when looking up languages, return nothing for the repo and move on to the next one"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-KqEwz",
        "measured": {
          "height": 412,
          "width": 320
        },
        "position": {
          "x": -232.36331105146417,
          "y": -757.161845992407
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-pFz9x",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "github_username"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Agent Instructions",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "github_username": {
                "advanced": false,
                "display_name": "github_username",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "github_username",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Get user's {github_username} last 20 repo details and then filter on \"language\" to get only language data.\nProvide the coding languages used in the user's repos.\n\nImportant!\n- If a language is not specified then ignore it and move on to the next item in the list\n- If you get a 404 error for the user, return \"No languages detected\""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-pFz9x",
        "measured": {
          "height": 412,
          "width": 320
        },
        "position": {
          "x": -208.33328263856262,
          "y": -1837.0250921766037
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent",
          "id": "Agent-Tq27d",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Coding Language Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1-mini"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Use the input name {github_username} to get information on the user's GitHub account, repository and coding languages used.\nProvide the GitHub username, number of repositories, and their coding languages used.\n\nUse https://api.github.com/users/{github_username} to get the number of public_repos and the user's url values.\nUse the Composio tool to get repo language details."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "input_value": {
                        "default": "",
                        "description": "The input provided by the user for the agent to process.",
                        "title": "Input Value",
                        "type": "string"
                      },
                      "order": {
                        "default": "Ascending",
                        "description": "Order of the messages.",
                        "enum": [
                          "Ascending",
                          "Descending"
                        ],
                        "title": "Order",
                        "type": "string"
                      }
                    },
                    "description": "An agent responsible for getting GitHub user repository links and repository coding languages",
                    "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.",
                    "display_name": "message_response",
                    "name": "coding_language_agent",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "Agent"
                    ]
                  }
                ]
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-Tq27d",
        "measured": {
          "height": 750,
          "width": 320
        },
        "position": {
          "x": 170.77765787415672,
          "y": -2208.147301079585
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Routes an input message to a corresponding output based on text comparison.",
          "display_name": "If-Else",
          "id": "ConditionalRouter-u9xP0",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "display_name": "If-Else",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message",
              "max_iterations",
              "default_route"
            ],
            "frozen": false,
            "icon": "split",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "True",
                "hidden": false,
                "method": "true_response",
                "name": "true_result",
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "False",
                "hidden": false,
                "method": "false_response",
                "name": "false_result",
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Case Sensitive",
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "case_sensitive",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\", \"regex\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n            self.stop(route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"false_result\")\n            return self.message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if not result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.message\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n\n            # Ensure case_sensitive is present for all other operators\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n"
              },
              "default_route": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Default Route",
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "name": "default_route",
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "false_result"
              },
              "input_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text Input",
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_text",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "match_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Match Text",
                "dynamic": false,
                "info": "The text input to compare against.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "match_text",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Message",
                "dynamic": false,
                "info": "The message to pass through either route.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "operator": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Operator",
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "load_from_db": false,
                "name": "operator",
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "starts with"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ConditionalRouter"
        },
        "dragging": false,
        "id": "ConditionalRouter-u9xP0",
        "measured": {
          "height": 588,
          "width": 320
        },
        "position": {
          "x": -850.6422296461493,
          "y": 316.4380904612411
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-OzTmx",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "non_modified_prompt",
                "false"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "false": {
                "advanced": false,
                "display_name": "false",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "false",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "non_modified_prompt": {
                "advanced": false,
                "display_name": "non_modified_prompt",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "non_modified_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Use the above information to generate a prompt to create an illustration of a cute animal chimera with emotions. Creatively blend multiple animals into a single, visually coherent chimera all combined into the the same physical body.\nAlong with the prompt, provide the GitHub username, number of repositories, and their coding languages used.\nGive succinct and concise reasons why you choose each animal and/or object and list the associated coding language.\n\nIf there isn't a GitHub profile or repositories for a user, return \"###Coding Languages Used: None ###Prompt for Illustration:Create a very cute and friendly whimsical shadow creature that \"doesn't have a GitHub repo\" in a magical scene.\". Don't hallucinate coding languages. \n\nImportant!!\n- Use the '<coding_language_animal_examples>' table to match each programming language to an animal. If you cannot find a language in the table, use OReilly animals for the language\n- Generated animals should be a combined chimera of all of the languages provided above and any interesting details from their GitHub profile\n- The background should be a cozy workspace filled with coding books and a warm cup of coffee, reflecting the joy and passion of programming\n- Keep generated prompt to 600 characters or less\n- Do not confuse \"Java\" and \"JavaScript\", those are two different things\n- Prompt should be optimized for image generation using the dall-e-3 model\n\n<coding_language_animal_examples>\nLanguage | Associated Animal |\n|-----------|----------------------|\n| Perl | Camel |\n| Python | Python Snake |\n| Haskell | Rhinoceros Beetle |\n| JavaScript | Rhinoceros |\n| Java | Butterfly | \n| C  | Goat | \n| Ruby | Fox | \n| PHP | Elephant | \n| SQL | Owl | \n| Unix | Tiger | \n| Julia | Parrot | \n| Assembly | Eagle | \n| TypeScript | Owl | \n| Kotlin | Cat | \n| CUDA | Dolphin  | \n| HTML | Spider | \n| CSS | Peacock | \n| Jupyter Notebook | Barn Owl | \n| Scala | Ram | \n| Shell (Bash, Zsh, etc.) | Nautilus | \n| Rust | Crab |\n| Lua | Moon | \n| Go | Gopher | \n| ReScript | Badger | \n| Elixir | Unicorn | \n| Vue.js | Chameleon |\n</coding_language_animal_examples>"
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Use the GitHubDetailsAgent tool to get a user's GitHub account and number of repositories information. \nUse the CodingLanguageAgent to get coding languages used.\n\n{non_modified_prompt}\n{false}"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-OzTmx",
        "measured": {
          "height": 494,
          "width": 320
        },
        "position": {
          "x": 79.56550204267688,
          "y": -120.23828630986442
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
          "display_name": "Structured Output",
          "id": "StructuredOutput-gJcud",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "display_name": "Structured Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "llm",
              "input_value",
              "system_prompt",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Structured Output",
                "hidden": null,
                "method": "build_structured_output",
                "name": "structured_output",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": false,
                "method": "as_dataframe",
                "name": "structured_output_dataframe",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pydantic import BaseModel, Field, create_model\nfrom trustcall import create_extractor\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.table import EditMode\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Format Instructions\",\n            info=\"The instructions to the language model for formatting the output.\",\n            value=(\n                \"You are an AI system designed to extract structured information from unstructured text.\"\n                \"Given the input_text, return a JSON object with predefined keys based on the expected structure.\"\n                \"Extract values accurately and format them according to the specified type \"\n                \"(e.g., string, integer, float, date).\"\n                \"If a value is missing or cannot be determined, return a default \"\n                \"(e.g., null, 0, or 'N/A').\"\n                \"If multiple instances of the expected structure exist within the input_text, \"\n                \"stream each as a separate JSON object.\"\n            ),\n            required=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            # TODO: remove deault value\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Indicate the data type of the output field (e.g., str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n            ],\n            value=[\n                {\n                    \"name\": \"field\",\n                    \"description\": \"description of field\",\n                    \"type\": \"str\",\n                    \"multiple\": \"False\",\n                }\n            ],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"[Deprecated] Always set to True\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"structured_output\",\n            display_name=\"Structured Output\",\n            method=\"build_structured_output\",\n        ),\n        Output(\n            name=\"structured_output_dataframe\",\n            display_name=\"DataFrame\",\n            method=\"as_dataframe\",\n        ),\n    ]\n\n    def build_structured_output_base(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n\n        output_model = create_model(\n            schema_name,\n            __doc__=f\"A list of {schema_name}.\",\n            objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n        )\n\n        try:\n            llm_with_structured_output = create_extractor(self.llm, tools=[output_model])\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        result = get_chat_result(\n            runnable=llm_with_structured_output,\n            system_message=self.system_prompt,\n            input_value=self.input_value,\n            config=config_dict,\n        )\n        if isinstance(result, BaseModel):\n            result = result.model_dump()\n        if responses := result.get(\"responses\"):\n            result = responses[0].model_dump()\n        if result and \"objects\" in result:\n            return result[\"objects\"]\n\n        return result\n\n    def build_structured_output(self) -> Data:\n        output = self.build_structured_output_base()\n\n        return Data(text_key=\"results\", data={\"results\": output})\n\n    def as_dataframe(self) -> DataFrame:\n        output = self.build_structured_output_base()\n        if isinstance(output, list):\n            return DataFrame(data=output)\n        return DataFrame(data=[output])\n"
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input Message",
                "dynamic": false,
                "info": "The input message to the language model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "llm": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Language Model",
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "llm",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "multiple": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Generate Multiple",
                "dynamic": false,
                "info": "[Deprecated] Always set to True",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "multiple",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "output_schema": {
                "_input_type": "TableInput",
                "advanced": false,
                "display_name": "Output Schema",
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "is_list": true,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "output_schema",
                "placeholder": "",
                "required": true,
                "show": true,
                "table_icon": "Table",
                "table_schema": {
                  "columns": [
                    {
                      "default": "field",
                      "description": "Specify the name of the output field.",
                      "disable_edit": false,
                      "display_name": "Name",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "name",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "description of field",
                      "description": "Describe the purpose of the output field.",
                      "disable_edit": false,
                      "display_name": "Description",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "description",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "str",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                      "disable_edit": false,
                      "display_name": "Type",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "type",
                      "options": [
                        "str",
                        "int",
                        "float",
                        "bool",
                        "dict"
                      ],
                      "sortable": true,
                      "type": "str"
                    }
                  ]
                },
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": [
                  {
                    "description": "A list of coding languages used by GitHub profile",
                    "multiple": "True",
                    "name": "coding_languages",
                    "type": "text"
                  },
                  {
                    "description": "The generated prompt response",
                    "multiple": "False",
                    "name": "prompt",
                    "type": "text"
                  },
                  {
                    "description": "The GitHub user name URL",
                    "multiple": "False",
                    "name": "github_user_name_url",
                    "type": "text"
                  },
                  {
                    "description": "The number of GitHub repositories",
                    "multiple": "False",
                    "name": "num_repositories",
                    "type": "text"
                  },
                  {
                    "description": "A list of coding language / animal pairs.\n\nExample:\n[\n  'Parrot',            'for Julia',\n  'Eagle',             'for Assembly',\n  'Owl',               'for TypeScript',\n  'Goat',              'for C',\n  'Cat',               'for Kotlin',\n  'Rhinoceros Beetle', 'for Haskell',\n  'Butterfly',         'for Java',\n  'Rhinoceros',        'for JavaScript'\n]",
                    "multiple": false,
                    "name": "animal_selection",
                    "type": "list"
                  },
                  {
                    "description": "GitHub achievements the user has earned",
                    "multiple": "True",
                    "name": "github_achievements",
                    "type": "text"
                  }
                ]
              },
              "schema_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Schema Name",
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "schema_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Format Instructions",
                "dynamic": false,
                "info": "The instructions to the language model for formatting the output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an AI system designed to extract structured information from unstructured text.Given the input_text, return a JSON object with predefined keys based on the expected structure.Extract values accurately and format them according to the specified type (e.g., string, integer, float, date).If a value is missing or cannot be determined, return a default (e.g., null, 0, or 'N/A').If multiple instances of the expected structure exist within the input_text, stream each as a separate JSON object."
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "StructuredOutput"
        },
        "dragging": false,
        "id": "StructuredOutput-gJcud",
        "measured": {
          "height": 529,
          "width": 320
        },
        "position": {
          "x": 1560.8058647596727,
          "y": 1238.7418923059279
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-tkP56",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-tkP56",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 2800.4260911096794,
          "y": 637.0285603680206
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-6zpqv",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a text output in the Playground.",
            "display_name": "Output Payload",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "languages:{coding_languages}|prompt:{prompt}|github_user_name_url:{github_user_name_url}|num_repositories:{num_repositories}|animal_selection:{animal_selection}|github_achievements:{github_achievements}"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-6zpqv",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 1843.6400965062785,
          "y": 497.22041798485475
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Retrieves and store chat messages from Astra DB.",
          "display_name": "Astra DB Chat Memory",
          "id": "AstraDBChatMemory-CmxPu",
          "node": {
            "base_classes": [
              "Memory"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Retrieves and store chat messages from Astra DB.",
            "display_name": "Astra DB Chat Memory",
            "documentation": "",
            "edited": false,
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "namespace",
              "session_id"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Memory",
                "hidden": false,
                "method": "build_message_history",
                "name": "memory",
                "required_inputs": [
                  "api_endpoint",
                  "collection_name",
                  "token"
                ],
                "selected": "Memory",
                "tool_mode": true,
                "types": [
                  "Memory"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_endpoint": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "API Endpoint",
                "dynamic": false,
                "info": "API endpoint URL for the Astra DB service.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "api_endpoint",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import os\n\nfrom astrapy.admin import parse_api_endpoint\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import MessageTextInput, SecretStrInput, StrInput\n\n\nclass AstraDBChatMemory(LCChatMemoryComponent):\n    display_name = \"Astra DB Chat Memory\"\n    description = \"Retrieves and store chat messages from Astra DB.\"\n    name = \"AstraDBChatMemory\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            advanced=os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\",\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        try:\n            from langchain_astradb.chat_message_histories import AstraDBChatMessageHistory\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        return AstraDBChatMessageHistory(\n            session_id=self.session_id,\n            collection_name=self.collection_name,\n            token=self.token,\n            api_endpoint=self.api_endpoint,\n            namespace=self.namespace or None,\n            environment=parse_api_endpoint(self.api_endpoint).environment,\n        )\n"
              },
              "collection_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "github_user_details"
              },
              "namespace": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Namespace",
                "dynamic": false,
                "info": "Optional namespace within Astra DB to use for the collection.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "namespace",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "token": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "AstraDBChatMemory"
        },
        "dragging": false,
        "id": "AstraDBChatMemory-CmxPu",
        "measured": {
          "height": 498,
          "width": 320
        },
        "position": {
          "x": -1837.6053870077353,
          "y": 435.69408738539886
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
          "display_name": "Message History",
          "id": "Memory-N9FGM",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "display_name": "Message History",
            "documentation": "",
            "edited": false,
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "frozen": false,
            "icon": "message-square-more",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": null,
                "method": "retrieve_messages",
                "name": "messages",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "retrieve_messages_as_text",
                "name": "messages_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": null,
                "method": "as_dataframe",
                "name": "dataframe",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import cast\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import aget_messages\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n            tool_mode=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Message\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    async def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory and not hasattr(self.memory, \"aget_messages\"):\n            memory_name = type(self.memory).__name__\n            err_msg = f\"External Memory object ({memory_name}) must have 'aget_messages' method.\"\n            raise AttributeError(err_msg)\n        # Check if n_messages is None or 0\n        if n_messages == 0:\n            stored = []\n        elif self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = await self.memory.aget_messages()\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = await aget_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return cast(Data, stored)\n\n    async def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, await self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    async def as_dataframe(self) -> DataFrame:\n        \"\"\"Convert the retrieved messages into a DataFrame.\n\n        Returns:\n            DataFrame: A DataFrame containing the message data.\n        \"\"\"\n        messages = await self.retrieve_messages()\n        return DataFrame(messages)\n"
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Memory"
        },
        "dragging": false,
        "id": "Memory-N9FGM",
        "measured": {
          "height": 472,
          "width": 320
        },
        "position": {
          "x": -1439.2069915731195,
          "y": 766.2566607074538
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "note-DdFao",
          "node": {
            "description": "# GitHub Handle \n# (App Input) \n\n\n\n\n\n\n# ->",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "lime"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "height": 325,
        "id": "note-DdFao",
        "measured": {
          "height": 325,
          "width": 421
        },
        "position": {
          "x": -2886.808708768551,
          "y": 381.44174929078616
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 420
      },
      {
        "data": {
          "id": "note-pYmtp",
          "node": {
            "description": "# Output Payload\n# (App Output) ->",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "lime"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "height": 324,
        "id": "note-pYmtp",
        "measured": {
          "height": 324,
          "width": 366
        },
        "position": {
          "x": 2733.3316833140943,
          "y": 417.294534526405
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 365
      },
      {
        "data": {
          "id": "note-imgxR",
          "node": {
            "description": "# Retrieve data from database\nRetrieves stored user information from Astra DB instead of the cost of agent processing and tokens on multiple runs for the same user.",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note"
        },
        "dragging": false,
        "height": 1049,
        "id": "note-imgxR",
        "measured": {
          "height": 1049,
          "width": 750
        },
        "position": {
          "x": -1855.8943546732833,
          "y": 254.16328904565287
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 749
      },
      {
        "data": {
          "id": "note-HNiyA",
          "node": {
            "description": "# Store user GitHub info In database\nStores the generated information in Astra DB to be used later if a user requests multiple generations.",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-HNiyA",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 2960.877231251176,
          "y": -339.87418353904116
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-wREke",
          "node": {
            "description": "# Conditional IF\n**If this is a new GitHub handle**: \n Execute full agentic flow\n\n**If user's data exists in the database**: Use stored data and process with LLM",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-wREke",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": -900.1705963607237,
          "y": 53.114006243271454
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-eYqzd",
          "node": {
            "description": "# New GitHub Handle Agentic Flow",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-eYqzd",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 48.44213740015539,
          "y": -244.27749068177172
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-D2wwe",
          "node": {
            "description": "# Coding Language Agent\nFind the coding languages from the first 10 repos for this GitHub user",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "blue"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-D2wwe",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 166.44378247479682,
          "y": -2388.989964089104
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-YXnJE",
          "node": {
            "description": "# GitHub Details Agent\nGet base GitHub handle info like URL, num repos, achievements, etc...",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "blue"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-YXnJE",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 169.97226490484508,
          "y": -1332.2498061578933
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-LyZmy",
          "node": {
            "description": "# Composio Tools\nUse the Composio tool for easy and authenticated access to the GitHub API.\n\n**With GitHub auth:** 5000 requests/hour\n\n**Without GitHub auth:** 60 requests/hour",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "blue"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "height": 686,
        "id": "note-LyZmy",
        "measured": {
          "height": 686,
          "width": 709
        },
        "position": {
          "x": -563.5127128178239,
          "y": -2633.5244752505846
        },
        "resizing": false,
        "selected": false,
        "type": "noteNode",
        "width": 708
      },
      {
        "data": {
          "id": "note-VnU3G",
          "node": {
            "description": "# Use Agent with Tools",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-VnU3G",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 530.8052240986749,
          "y": -349.02094064423915
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-uSj8N",
          "node": {
            "description": "# ->\n\n# Session ID for testing\nThese connectors are for testing within  the Langflow UI only. Our application sets the GitHub handle as the session ID at runtime.\n\n# ->",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-uSj8N",
        "measured": {
          "height": 324,
          "width": 324
        },
        "position": {
          "x": -2179.78008317492,
          "y": 774.0036904343237
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-96V8I",
          "node": {
            "description": "# Post Process Data\nUse the Structured Output component to create consistent name:value pairs to use in the output payload",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-96V8I",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 1509.9152948206222,
          "y": -443.83424163317505
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-Sd0JU",
          "node": {
            "description": "# Post Process Data\nUse the Structured Output component to create consistent name:value pairs to use in the output payload",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-Sd0JU",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 1524.5934803348764,
          "y": 1024.7676772429436
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-eSFf1",
          "node": {
            "description": "# Fast LLM for Structured Output\n\n",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-eSFf1",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 1058.2832066659057,
          "y": 142.45316764642465
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "id": "note-E6wqE",
          "node": {
            "description": "# Create Structured Output Payload\nCreate a consistent and structured payload to send to the application\n",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note"
        },
        "dragging": false,
        "id": "note-E6wqE",
        "measured": {
          "height": 324,
          "width": 325
        },
        "position": {
          "x": 1871.057692402806,
          "y": 332.17876033651214
        },
        "selected": false,
        "type": "noteNode"
      },
      {
        "data": {
          "description": "Stores a chat message or text into Langflow tables or an external memory.",
          "display_name": "Message Store",
          "id": "StoreMessage-8Ia2V",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Stores a chat message or text into Langflow tables or an external memory.",
            "display_name": "Message Store",
            "documentation": "",
            "edited": false,
            "field_order": [
              "message",
              "memory",
              "sender",
              "sender_name",
              "session_id"
            ],
            "frozen": false,
            "icon": "message-square-text",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Stored Messages",
                "hidden": true,
                "method": "store_message",
                "name": "stored_messages",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import HandleInput\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.memory import aget_messages, astore_message\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI\n\n\nclass MessageStoreComponent(Component):\n    display_name = \"Message Store\"\n    description = \"Stores a chat message or text into Langflow tables or an external memory.\"\n    icon = \"message-square-text\"\n    name = \"StoreMessage\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True, tool_mode=True\n        ),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"The external memory to store the message. If empty, it will use the Langflow tables.\",\n        ),\n        MessageTextInput(\n            name=\"sender\",\n            display_name=\"Sender\",\n            info=\"The sender of the message. Might be Machine or User. \"\n            \"If empty, the current sender parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"The name of the sender. Might be AI or User. If empty, the current sender parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            value=\"\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\", hidden=True),\n    ]\n\n    async def store_message(self) -> Message:\n        message = Message(text=self.message) if isinstance(self.message, str) else self.message\n\n        message.session_id = self.session_id or message.session_id\n        message.sender = self.sender or message.sender or MESSAGE_SENDER_AI\n        message.sender_name = self.sender_name or message.sender_name or MESSAGE_SENDER_NAME_AI\n\n        stored_messages: list[Message] = []\n\n        if self.memory:\n            self.memory.session_id = message.session_id\n            lc_message = message.to_lc_message()\n            await self.memory.aadd_messages([lc_message])\n\n            stored_messages = await self.memory.aget_messages() or []\n\n            stored_messages = [Message.from_lc_message(m) for m in stored_messages] if stored_messages else []\n\n            if message.sender:\n                stored_messages = [m for m in stored_messages if m.sender == message.sender]\n        else:\n            await astore_message(message, flow_id=self.graph.flow_id)\n            stored_messages = (\n                await aget_messages(\n                    session_id=message.session_id, sender_name=message.sender_name, sender=message.sender\n                )\n                or []\n            )\n\n        if not stored_messages:\n            msg = \"No messages were stored. Please ensure that the session ID and sender are properly set.\"\n            raise ValueError(msg)\n\n        stored_message = stored_messages[0]\n        self.status = stored_message\n        return stored_message\n"
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "The external memory to store the message. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "message": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Message",
                "dynamic": false,
                "info": "The chat message to be stored.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender",
                "dynamic": false,
                "info": "The sender of the message. Might be Machine or User. If empty, the current sender parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "The name of the sender. Might be AI or User. If empty, the current sender parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "StoreMessage"
        },
        "dragging": false,
        "id": "StoreMessage-8Ia2V",
        "measured": {
          "height": 258,
          "width": 320
        },
        "position": {
          "x": 2991.9365241282762,
          "y": -125.67047663991036
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Convert a DataFrame into plain text following a specified template. Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.",
          "display_name": "Parse DataFrame",
          "id": "ParseDataFrame-wnVJC",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert a DataFrame into plain text following a specified template. Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.",
            "display_name": "Parse DataFrame",
            "documentation": "",
            "edited": false,
            "field_order": [
              "df",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": true,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "hidden": false,
                "method": "parse_data",
                "name": "text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import DataFrameInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataFrameComponent(Component):\n    display_name = \"Parse DataFrame\"\n    description = (\n        \"Convert a DataFrame into plain text following a specified template. \"\n        \"Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.\"\n    )\n    icon = \"braces\"\n    name = \"ParseDataFrame\"\n    legacy = True\n\n    inputs = [\n        DataFrameInput(name=\"df\", display_name=\"DataFrame\", info=\"The DataFrame to convert to text rows.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=(\n                \"The template for formatting each row. \"\n                \"Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.\"\n            ),\n            value=\"{text}\",\n        ),\n        StrInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String that joins all row texts when building the single Text output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"All rows combined into a single text, each row formatted by the template and separated by `sep`.\",\n            method=\"parse_data\",\n        ),\n    ]\n\n    def _clean_args(self):\n        dataframe = self.df\n        template = self.template or \"{text}\"\n        sep = self.sep or \"\\n\"\n        return dataframe, template, sep\n\n    def parse_data(self) -> Message:\n        \"\"\"Converts each row of the DataFrame into a formatted string using the template.\n\n        then joins them with `sep`. Returns a single combined string as a Message.\n        \"\"\"\n        dataframe, template, sep = self._clean_args()\n\n        lines = []\n        # For each row in the DataFrame, build a dict and format\n        for _, row in dataframe.iterrows():\n            row_dict = row.to_dict()\n            text_line = template.format(**row_dict)  # e.g. template=\"{text}\", row_dict={\"text\": \"Hello\"}\n            lines.append(text_line)\n\n        # Join all lines with the provided separator\n        result_string = sep.join(lines)\n        self.status = result_string  # store in self.status for UI logs\n        return Message(text=result_string)\n"
              },
              "df": {
                "_input_type": "DataFrameInput",
                "advanced": false,
                "display_name": "DataFrame",
                "dynamic": false,
                "info": "The DataFrame to convert to text rows.",
                "input_types": [
                  "DataFrame"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "df",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String that joins all row texts when building the single Text output.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template for formatting each row. Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParseDataFrame"
        },
        "dragging": false,
        "id": "ParseDataFrame-wnVJC",
        "measured": {
          "height": 334,
          "width": 320
        },
        "position": {
          "x": 2313.6736371524016,
          "y": -211.52833025548927
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Convert a DataFrame into plain text following a specified template. Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.",
          "display_name": "Parse DataFrame",
          "id": "ParseDataFrame-DJZTQ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Convert a DataFrame into plain text following a specified template. Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.",
            "display_name": "Parse DataFrame",
            "documentation": "",
            "edited": false,
            "field_order": [
              "df",
              "template",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": true,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "hidden": false,
                "method": "parse_data",
                "name": "text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import DataFrameInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataFrameComponent(Component):\n    display_name = \"Parse DataFrame\"\n    description = (\n        \"Convert a DataFrame into plain text following a specified template. \"\n        \"Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.\"\n    )\n    icon = \"braces\"\n    name = \"ParseDataFrame\"\n    legacy = True\n\n    inputs = [\n        DataFrameInput(name=\"df\", display_name=\"DataFrame\", info=\"The DataFrame to convert to text rows.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=(\n                \"The template for formatting each row. \"\n                \"Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.\"\n            ),\n            value=\"{text}\",\n        ),\n        StrInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String that joins all row texts when building the single Text output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"All rows combined into a single text, each row formatted by the template and separated by `sep`.\",\n            method=\"parse_data\",\n        ),\n    ]\n\n    def _clean_args(self):\n        dataframe = self.df\n        template = self.template or \"{text}\"\n        sep = self.sep or \"\\n\"\n        return dataframe, template, sep\n\n    def parse_data(self) -> Message:\n        \"\"\"Converts each row of the DataFrame into a formatted string using the template.\n\n        then joins them with `sep`. Returns a single combined string as a Message.\n        \"\"\"\n        dataframe, template, sep = self._clean_args()\n\n        lines = []\n        # For each row in the DataFrame, build a dict and format\n        for _, row in dataframe.iterrows():\n            row_dict = row.to_dict()\n            text_line = template.format(**row_dict)  # e.g. template=\"{text}\", row_dict={\"text\": \"Hello\"}\n            lines.append(text_line)\n\n        # Join all lines with the provided separator\n        result_string = sep.join(lines)\n        self.status = result_string  # store in self.status for UI logs\n        return Message(text=result_string)\n"
              },
              "df": {
                "_input_type": "DataFrameInput",
                "advanced": false,
                "display_name": "DataFrame",
                "dynamic": false,
                "info": "The DataFrame to convert to text rows.",
                "input_types": [
                  "DataFrame"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "df",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sep": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String that joins all row texts when building the single Text output.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template for formatting each row. Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParseDataFrame"
        },
        "dragging": false,
        "id": "ParseDataFrame-DJZTQ",
        "measured": {
          "height": 334,
          "width": 320
        },
        "position": {
          "x": 2321.4517529177906,
          "y": 1342.978214146284
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Use Composio toolset to run actions with your agent",
          "display_name": "Composio Tools",
          "id": "ComposioAPI-YUTVr",
          "node": {
            "base_classes": [
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Use Composio toolset to run actions with your agent",
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "tool_name",
              "actions"
            ],
            "frozen": false,
            "icon": "Composio",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tools",
                "hidden": false,
                "method": "build_tool",
                "name": "tools",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "actions": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "helper_text": "",
                "helper_text_metadata": {
                  "icon": "Check",
                  "variant": "success"
                },
                "info": "The actions to use",
                "limit": 1,
                "name": "actions",
                "options": [
                  {
                    "name": "GITHUB_ACCEPT_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_ADD_APP_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_ADD_A_REPOSITORY_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION"
                  },
                  {
                    "name": "GITHUB_ADD_A_SECURITY_MANAGER_TEAM"
                  },
                  {
                    "name": "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_ADD_LABELS_TO_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_PROJECT_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS"
                  },
                  {
                    "name": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY"
                  },
                  {
                    "name": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_ADD_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_ADD_TEAM_MEMBER_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_USER_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM"
                  },
                  {
                    "name": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER"
                  },
                  {
                    "name": "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST"
                  },
                  {
                    "name": "GITHUB_BLOCK_A_USER"
                  },
                  {
                    "name": "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CANCEL_AN_IMPORT"
                  },
                  {
                    "name": "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION"
                  },
                  {
                    "name": "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_CANCEL_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_CHECK_A_TOKEN"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_GIST_IS_STARRED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS"
                  },
                  {
                    "name": "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY"
                  },
                  {
                    "name": "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY"
                  },
                  {
                    "name": "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS"
                  },
                  {
                    "name": "GITHUB_COMPARE_TWO_COMMITS"
                  },
                  {
                    "name": "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG"
                  },
                  {
                    "name": "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_INVITATION"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_PROJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_BLOB"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_COMMIT_STATUS"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOYMENT_STATUS"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOY_KEY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_FORK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_FORK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GIST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GIST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_LABEL"
                  },
                  {
                    "name": "GITHUB_CREATE_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_PROJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TAG_OBJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TEAM"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TREE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_USER_PROJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT"
                  },
                  {
                    "name": "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION"
                  },
                  {
                    "name": "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM"
                  },
                  {
                    "name": "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER"
                  },
                  {
                    "name": "GITHUB_DECLINE_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_DELETE_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_APP_AUTHORIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_APP_TOKEN"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ARTIFACT"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ENVIRONMENT_SECRET"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ISSUE_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DEPLOY_KEY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_FILE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GIST"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_LABEL"
                  },
                  {
                    "name": "GITHUB_DELETE_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_RELEASE_ASSET"
                  },
                  {
                    "name": "GITHUB_DELETE_A_RELEASE_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_SECRET"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_TEAM"
                  },
                  {
                    "name": "GITHUB_DELETE_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_THREAD_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_DELETE_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID"
                  },
                  {
                    "name": "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_TEAM_DISCUSSION_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_WORKFLOW_RUN_LOGS"
                  },
                  {
                    "name": "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES"
                  },
                  {
                    "name": "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_DISABLE_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG"
                  },
                  {
                    "name": "GITHUB_DISABLE_VULNERABILITY_ALERTS"
                  },
                  {
                    "name": "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_AN_ARTIFACT"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS"
                  },
                  {
                    "name": "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES"
                  },
                  {
                    "name": "GITHUB_ENABLE_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS"
                  },
                  {
                    "name": "GITHUB_ENABLE_VULNERABILITY_ALERTS"
                  },
                  {
                    "name": "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET"
                  },
                  {
                    "name": "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET"
                  },
                  {
                    "name": "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION"
                  },
                  {
                    "name": "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION"
                  },
                  {
                    "name": "GITHUB_FOLLOW_A_USER"
                  },
                  {
                    "name": "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_FORK_A_GIST"
                  },
                  {
                    "name": "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_GET_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_GET_ADMIN_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_API_VERSIONS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CODES_OF_CONDUCT"
                  },
                  {
                    "name": "GITHUB_GET_ALL_COMMONLY_USED_LICENSES"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_GET_ALL_GITIGNORE_TEMPLATES"
                  },
                  {
                    "name": "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_ALL_REPOSITORY_RULESETS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_REPOSITORY_TOPICS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_GET_AN_APP"
                  },
                  {
                    "name": "GITHUB_GET_AN_ARTIFACT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ASSIGNMENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_GET_AN_IMPORT_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE_EVENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_ASSIGNMENT_GRADES"
                  },
                  {
                    "name": "GITHUB_GET_A_BLOB"
                  },
                  {
                    "name": "GITHUB_GET_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_GET_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_GET_A_CLASSROOM"
                  },
                  {
                    "name": "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_OF_CONDUCT"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT_OBJECT"
                  },
                  {
                    "name": "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE"
                  },
                  {
                    "name": "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPENDABOT_ALERT"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOYMENT_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOY_KEY"
                  },
                  {
                    "name": "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES"
                  },
                  {
                    "name": "GITHUB_GET_A_GIST"
                  },
                  {
                    "name": "GITHUB_GET_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_GIST_REVISION"
                  },
                  {
                    "name": "GITHUB_GET_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_GET_A_GITIGNORE_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_A_LABEL"
                  },
                  {
                    "name": "GITHUB_GET_A_LICENSE"
                  },
                  {
                    "name": "GITHUB_GET_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_GET_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_GET_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_GET_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_GET_A_RELEASE_ASSET"
                  },
                  {
                    "name": "GITHUB_GET_A_RELEASE_BY_TAG_NAME"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_README"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_RULE_SUITE"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_SECRET_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_TAG"
                  },
                  {
                    "name": "GITHUB_GET_A_TEAM_BY_NAME"
                  },
                  {
                    "name": "GITHUB_GET_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_A_THREAD"
                  },
                  {
                    "name": "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_TREE"
                  },
                  {
                    "name": "GITHUB_GET_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_USER_MIGRATION_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_GET_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT"
                  },
                  {
                    "name": "GITHUB_GET_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_COMMIT_AUTHORS"
                  },
                  {
                    "name": "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_COMMUNITY_PROFILE_METRICS"
                  },
                  {
                    "name": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE"
                  },
                  {
                    "name": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT"
                  },
                  {
                    "name": "GITHUB_GET_EMOJIS"
                  },
                  {
                    "name": "GITHUB_GET_EMOJIS"
                  },
                  {
                    "name": "GITHUB_GET_FEEDS"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_META_INFORMATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_PAGES_BUILD"
                  },
                  {
                    "name": "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD"
                  },
                  {
                    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_GET_LARGE_FILES"
                  },
                  {
                    "name": "GITHUB_GET_LATEST_PAGES_BUILD"
                  },
                  {
                    "name": "GITHUB_GET_OCTOCAT"
                  },
                  {
                    "name": "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY"
                  },
                  {
                    "name": "GITHUB_GET_PAGE_VIEWS"
                  },
                  {
                    "name": "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION"
                  },
                  {
                    "name": "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_CLONES"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_CONTENT"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_CONTENT"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_SECRET_SECURELY"
                  },
                  {
                    "name": "GITHUB_GET_REPO_DEV_ENV_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_RULES_FOR_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION"
                  },
                  {
                    "name": "GITHUB_GET_STATUS_CHECKS_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_TEAM_MEMBER_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE"
                  },
                  {
                    "name": "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY"
                  },
                  {
                    "name": "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_THE_LATEST_RELEASE"
                  },
                  {
                    "name": "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT"
                  },
                  {
                    "name": "GITHUB_GET_THE_ZEN_OF_GITHUB"
                  },
                  {
                    "name": "GITHUB_GET_TOP_REFERRAL_PATHS"
                  },
                  {
                    "name": "GITHUB_GET_TOP_REFERRAL_SOURCES"
                  },
                  {
                    "name": "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_WORKFLOW_RUN_USAGE"
                  },
                  {
                    "name": "GITHUB_GET_WORKFLOW_USAGE"
                  },
                  {
                    "name": "GITHUB_GITHUB_API_ROOT"
                  },
                  {
                    "name": "GITHUB_GITHUB_API_ROOT"
                  },
                  {
                    "name": "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT"
                  },
                  {
                    "name": "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_ASSIGNEES"
                  },
                  {
                    "name": "GITHUB_LIST_ASSIGNEES"
                  },
                  {
                    "name": "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM"
                  },
                  {
                    "name": "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_BRANCHES"
                  },
                  {
                    "name": "GITHUB_LIST_BRANCHES"
                  },
                  {
                    "name": "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_RUN_ANNOTATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE"
                  },
                  {
                    "name": "GITHUB_LIST_CHILD_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_CHILD_TEAMS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_CLASSROOMS"
                  },
                  {
                    "name": "GITHUB_LIST_CODEOWNERS_ERRORS"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW"
                  },
                  {
                    "name": "GITHUB_LIST_COMMITS"
                  },
                  {
                    "name": "GITHUB_LIST_COMMITS"
                  },
                  {
                    "name": "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_LIST_COMMIT_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE"
                  },
                  {
                    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOYMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOYMENT_STATUSES"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOY_KEYS"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSIONS"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSION_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS"
                  },
                  {
                    "name": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENT_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENT_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_FOLLOWERS_OF_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FORKS"
                  },
                  {
                    "name": "GITHUB_LIST_GISTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_GIST_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_GIST_COMMITS"
                  },
                  {
                    "name": "GITHUB_LIST_GIST_FORKS"
                  },
                  {
                    "name": "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_GITHUB_PAGES_BUILDS"
                  },
                  {
                    "name": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES"
                  },
                  {
                    "name": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES"
                  },
                  {
                    "name": "GITHUB_LIST_GPG_KEYS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP"
                  },
                  {
                    "name": "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE"
                  },
                  {
                    "name": "GITHUB_LIST_MATCHING_REFERENCES"
                  },
                  {
                    "name": "GITHUB_LIST_MILESTONES"
                  },
                  {
                    "name": "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_MEMBERS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_MIGRATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_RULE_SUITES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_WEBHOOKS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES"
                  },
                  {
                    "name": "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_OWNED_PACKAGE_VERSIONS"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_PENDING_TEAM_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_PROJECT_CARDS"
                  },
                  {
                    "name": "GITHUB_LIST_PROJECT_COLLABORATORS"
                  },
                  {
                    "name": "GITHUB_LIST_PROJECT_COLUMNS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_GISTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_GISTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS_FILES"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_RELEASES"
                  },
                  {
                    "name": "GITHUB_LIST_RELEASE_ASSETS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ACTIVITIES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_COLLABORATORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_COLLABORATORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ISSUES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ISSUES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_LANGUAGES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_RULE_SUITES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_TAGS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_WEBHOOKS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_WORKFLOWS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE"
                  },
                  {
                    "name": "GITHUB_LIST_REPO_ACCESS_BY_TOKEN"
                  },
                  {
                    "name": "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES"
                  },
                  {
                    "name": "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE"
                  },
                  {
                    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_SECURITY_MANAGER_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS"
                  },
                  {
                    "name": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_STARGAZERS"
                  },
                  {
                    "name": "GITHUB_LIST_STARGAZERS"
                  },
                  {
                    "name": "GITHUB_LIST_STARRED_GISTS"
                  },
                  {
                    "name": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED"
                  },
                  {
                    "name": "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_MEMBERS"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_MEMBERS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_PROJECTS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS"
                  },
                  {
                    "name": "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS"
                  },
                  {
                    "name": "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_USERS"
                  },
                  {
                    "name": "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_USER_MIGRATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_USER_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_WATCHERS"
                  },
                  {
                    "name": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS"
                  },
                  {
                    "name": "GITHUB_LOCK_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES"
                  },
                  {
                    "name": "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS"
                  },
                  {
                    "name": "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS"
                  },
                  {
                    "name": "GITHUB_MAP_A_COMMIT_AUTHOR"
                  },
                  {
                    "name": "GITHUB_MARK_A_THREAD_AS_DONE"
                  },
                  {
                    "name": "GITHUB_MARK_A_THREAD_AS_READ"
                  },
                  {
                    "name": "GITHUB_MARK_NOTIFICATIONS_AS_READ"
                  },
                  {
                    "name": "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ"
                  },
                  {
                    "name": "GITHUB_MERGE_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_MERGE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_MOVE_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_MOVE_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_PING_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_PING_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY"
                  },
                  {
                    "name": "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER"
                  },
                  {
                    "name": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER"
                  },
                  {
                    "name": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER"
                  },
                  {
                    "name": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER"
                  },
                  {
                    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_REMOVE_ORG_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP"
                  },
                  {
                    "name": "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET"
                  },
                  {
                    "name": "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY"
                  },
                  {
                    "name": "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_REMOVE_STATUS_CHECK_PROTECTION"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_MEMBER_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_REMOVE_USER_AS_A_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_RENAME_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_RENDER_A_MARKDOWN_DOCUMENT"
                  },
                  {
                    "name": "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS"
                  },
                  {
                    "name": "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED"
                  },
                  {
                    "name": "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET"
                  },
                  {
                    "name": "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD"
                  },
                  {
                    "name": "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_REREQUEST_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_REREQUEST_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_RESET_A_TOKEN"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION"
                  },
                  {
                    "name": "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN"
                  },
                  {
                    "name": "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS"
                  },
                  {
                    "name": "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_RE_RUN_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_SEARCH_CODE"
                  },
                  {
                    "name": "GITHUB_SEARCH_COMMITS"
                  },
                  {
                    "name": "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS"
                  },
                  {
                    "name": "GITHUB_SEARCH_LABELS"
                  },
                  {
                    "name": "GITHUB_SEARCH_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_SEARCH_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_SEARCH_TOPICS"
                  },
                  {
                    "name": "GITHUB_SEARCH_USERS"
                  },
                  {
                    "name": "GITHUB_SET_ADMIN_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_APP_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_SET_A_THREAD_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_SET_LABELS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_SET_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_USER_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_START_AN_IMPORT"
                  },
                  {
                    "name": "GITHUB_START_AN_ORGANIZATION_MIGRATION"
                  },
                  {
                    "name": "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_START_A_USER_MIGRATION"
                  },
                  {
                    "name": "GITHUB_STAR_A_GIST"
                  },
                  {
                    "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER"
                  },
                  {
                    "name": "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_TRANSFER_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UNBLOCK_A_USER"
                  },
                  {
                    "name": "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_UNFOLLOW_A_USER"
                  },
                  {
                    "name": "GITHUB_UNLOCK_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UNLOCK_A_USER_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UNSTAR_A_GIST"
                  },
                  {
                    "name": "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_IMPORT"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CODE_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DEPENDABOT_ALERT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_GIST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_LABEL"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_RELEASE_ASSET"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_TEAM"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UPDATE_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_UPDATE_GIT_LFS_PREFERENCE"
                  },
                  {
                    "name": "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION"
                  },
                  {
                    "name": "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES"
                  },
                  {
                    "name": "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS"
                  },
                  {
                    "name": "GITHUB_UPDATE_STATUS_CHECK_PROTECTION"
                  },
                  {
                    "name": "GITHUB_UPDATE_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_TOKEN_ORG_ACCESS"
                  },
                  {
                    "name": "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA"
                  },
                  {
                    "name": "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED"
                  }
                ],
                "placeholder": "Select action",
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": [
                  {
                    "chosen": false,
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
                    "selected": false
                  }
                ]
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=1,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "tool_name": {
                "_input_type": "ConnectionInput",
                "advanced": false,
                "button_metadata": {
                  "icon": "unplug",
                  "variant": "destructive"
                },
                "connection_link": "",
                "display_name": "Tool Name",
                "dynamic": false,
                "helper_text": "",
                "helper_text_metadata": {},
                "info": "The name of the tool to use",
                "name": "tool_name",
                "options": [
                  {
                    "icon": "confluence",
                    "link": "",
                    "name": "Confluence"
                  },
                  {
                    "icon": "discord",
                    "link": "",
                    "name": "Discord"
                  },
                  {
                    "icon": "dropbox",
                    "link": "",
                    "name": "Dropbox"
                  },
                  {
                    "icon": "github",
                    "link": "validated",
                    "name": "Github"
                  },
                  {
                    "icon": "gmail",
                    "link": "",
                    "name": "Gmail"
                  },
                  {
                    "icon": "linkedin",
                    "link": "",
                    "name": "Linkedin"
                  },
                  {
                    "icon": "notion",
                    "link": "",
                    "name": "Notion"
                  },
                  {
                    "icon": "slack",
                    "link": "",
                    "name": "Slack"
                  },
                  {
                    "icon": "youtube",
                    "link": "",
                    "name": "Youtube"
                  }
                ],
                "placeholder": "Select a tool...",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "connect",
                "value": "Github"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ComposioAPI"
        },
        "dragging": false,
        "id": "ComposioAPI-YUTVr",
        "measured": {
          "height": 400,
          "width": 320
        },
        "position": {
          "x": -541.874577835576,
          "y": -2363.7746530448585
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI",
          "id": "OpenAIModel-aya9W",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "hidden": false,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": [
                  "api_key"
                ],
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import (\n    OPENAI_MODEL_NAMES,\n    OPENAI_REASONING_MODEL_NAMES,\n)\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\nfrom langflow.logging import logger\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[1],\n            combobox=True,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            show=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        parameters = {\n            \"api_key\": SecretStr(self.api_key).get_secret_value() if self.api_key else None,\n            \"model_name\": self.model_name,\n            \"max_tokens\": self.max_tokens or None,\n            \"model_kwargs\": self.model_kwargs or {},\n            \"base_url\": self.openai_api_base or \"https://api.openai.com/v1\",\n            \"seed\": self.seed,\n            \"max_retries\": self.max_retries,\n            \"timeout\": self.timeout,\n            \"temperature\": self.temperature if self.temperature is not None else 0.1,\n        }\n\n        logger.info(f\"Model name: {self.model_name}\")\n        if self.model_name in OPENAI_REASONING_MODEL_NAMES:\n            logger.info(\"Getting reasoning model parameters\")\n            parameters.pop(\"temperature\")\n            parameters.pop(\"seed\")\n        output = ChatOpenAI(**parameters)\n        if self.json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_REASONING_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = False\n            build_config[\"seed\"][\"show\"] = False\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = True\n            build_config[\"seed\"][\"show\"] = True\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": true,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1"
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIModel"
        },
        "dragging": false,
        "id": "OpenAIModel-aya9W",
        "measured": {
          "height": 448,
          "width": 320
        },
        "position": {
          "x": 1097.039132853029,
          "y": 274.8325708088636
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-dUtfS",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-dUtfS",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 878.7272857952332,
          "y": 608.6812725333801
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Use Composio toolset to run actions with your agent",
          "display_name": "Composio Tools",
          "id": "ComposioAPI-feuoE",
          "node": {
            "base_classes": [
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Use Composio toolset to run actions with your agent",
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "tool_name",
              "actions"
            ],
            "frozen": false,
            "icon": "Composio",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tools",
                "hidden": false,
                "method": "build_tool",
                "name": "tools",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "actions": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "helper_text": "",
                "helper_text_metadata": {
                  "icon": "Check",
                  "variant": "success"
                },
                "info": "The actions to use",
                "limit": 1,
                "name": "actions",
                "options": [
                  {
                    "name": "GITHUB_ACCEPT_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_ADD_APP_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_ADD_A_REPOSITORY_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION"
                  },
                  {
                    "name": "GITHUB_ADD_A_SECURITY_MANAGER_TEAM"
                  },
                  {
                    "name": "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_ADD_LABELS_TO_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS"
                  },
                  {
                    "name": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_PROJECT_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS"
                  },
                  {
                    "name": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY"
                  },
                  {
                    "name": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_ADD_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_ADD_TEAM_MEMBER_LEGACY"
                  },
                  {
                    "name": "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ADD_USER_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM"
                  },
                  {
                    "name": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER"
                  },
                  {
                    "name": "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST"
                  },
                  {
                    "name": "GITHUB_BLOCK_A_USER"
                  },
                  {
                    "name": "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CANCEL_AN_IMPORT"
                  },
                  {
                    "name": "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION"
                  },
                  {
                    "name": "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_CANCEL_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_CHECK_A_TOKEN"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_GIST_IS_STARRED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS"
                  },
                  {
                    "name": "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY"
                  },
                  {
                    "name": "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY"
                  },
                  {
                    "name": "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS"
                  },
                  {
                    "name": "GITHUB_COMPARE_TWO_COMMITS"
                  },
                  {
                    "name": "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG"
                  },
                  {
                    "name": "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_INVITATION"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_PROJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_BLOB"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_COMMIT_STATUS"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOYMENT_STATUS"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DEPLOY_KEY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_FORK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_FORK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GIST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GIST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_LABEL"
                  },
                  {
                    "name": "GITHUB_CREATE_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_PROJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TAG_OBJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TEAM"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK"
                  },
                  {
                    "name": "GITHUB_CREATE_A_TREE"
                  },
                  {
                    "name": "GITHUB_CREATE_A_USER_PROJECT"
                  },
                  {
                    "name": "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT"
                  },
                  {
                    "name": "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION"
                  },
                  {
                    "name": "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS"
                  },
                  {
                    "name": "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM"
                  },
                  {
                    "name": "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER"
                  },
                  {
                    "name": "GITHUB_DECLINE_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_DELETE_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_APP_AUTHORIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_APP_TOKEN"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ARTIFACT"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ENVIRONMENT_SECRET"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ISSUE_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DEPLOY_KEY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_FILE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GIST"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_LABEL"
                  },
                  {
                    "name": "GITHUB_DELETE_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_RELEASE_ASSET"
                  },
                  {
                    "name": "GITHUB_DELETE_A_RELEASE_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_SECRET"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_TEAM"
                  },
                  {
                    "name": "GITHUB_DELETE_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_DELETE_A_THREAD_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DELETE_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_DELETE_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID"
                  },
                  {
                    "name": "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION"
                  },
                  {
                    "name": "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_TEAM_DISCUSSION_REACTION"
                  },
                  {
                    "name": "GITHUB_DELETE_WORKFLOW_RUN_LOGS"
                  },
                  {
                    "name": "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES"
                  },
                  {
                    "name": "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_DISABLE_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG"
                  },
                  {
                    "name": "GITHUB_DISABLE_VULNERABILITY_ALERTS"
                  },
                  {
                    "name": "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_AN_ARTIFACT"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS"
                  },
                  {
                    "name": "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS"
                  },
                  {
                    "name": "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES"
                  },
                  {
                    "name": "GITHUB_ENABLE_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS"
                  },
                  {
                    "name": "GITHUB_ENABLE_VULNERABILITY_ALERTS"
                  },
                  {
                    "name": "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET"
                  },
                  {
                    "name": "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET"
                  },
                  {
                    "name": "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION"
                  },
                  {
                    "name": "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION"
                  },
                  {
                    "name": "GITHUB_FOLLOW_A_USER"
                  },
                  {
                    "name": "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_FORK_A_GIST"
                  },
                  {
                    "name": "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_GET_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_GET_ADMIN_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_API_VERSIONS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CODES_OF_CONDUCT"
                  },
                  {
                    "name": "GITHUB_GET_ALL_COMMONLY_USED_LICENSES"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_GET_ALL_GITIGNORE_TEMPLATES"
                  },
                  {
                    "name": "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_ALL_REPOSITORY_RULESETS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_REPOSITORY_TOPICS"
                  },
                  {
                    "name": "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_GET_AN_APP"
                  },
                  {
                    "name": "GITHUB_GET_AN_ARTIFACT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ASSIGNMENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_GET_AN_IMPORT_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ISSUE_EVENT"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_GET_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_ASSIGNMENT_GRADES"
                  },
                  {
                    "name": "GITHUB_GET_A_BLOB"
                  },
                  {
                    "name": "GITHUB_GET_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_GET_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_GET_A_CLASSROOM"
                  },
                  {
                    "name": "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_OF_CONDUCT"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_COMMIT_OBJECT"
                  },
                  {
                    "name": "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE"
                  },
                  {
                    "name": "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPENDABOT_ALERT"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOYMENT_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_A_DEPLOY_KEY"
                  },
                  {
                    "name": "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES"
                  },
                  {
                    "name": "GITHUB_GET_A_GIST"
                  },
                  {
                    "name": "GITHUB_GET_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_GET_A_GIST_REVISION"
                  },
                  {
                    "name": "GITHUB_GET_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_GET_A_GITIGNORE_TEMPLATE"
                  },
                  {
                    "name": "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_A_LABEL"
                  },
                  {
                    "name": "GITHUB_GET_A_LICENSE"
                  },
                  {
                    "name": "GITHUB_GET_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_GET_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_GET_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_GET_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_GET_A_RELEASE_ASSET"
                  },
                  {
                    "name": "GITHUB_GET_A_RELEASE_BY_TAG_NAME"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_README"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_RULE_SUITE"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_GET_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_SECRET_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_TAG"
                  },
                  {
                    "name": "GITHUB_GET_A_TEAM_BY_NAME"
                  },
                  {
                    "name": "GITHUB_GET_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_A_THREAD"
                  },
                  {
                    "name": "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_TREE"
                  },
                  {
                    "name": "GITHUB_GET_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_A_USER_MIGRATION_STATUS"
                  },
                  {
                    "name": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_GET_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_GET_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT"
                  },
                  {
                    "name": "GITHUB_GET_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_COMMIT_AUTHORS"
                  },
                  {
                    "name": "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_COMMUNITY_PROFILE_METRICS"
                  },
                  {
                    "name": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE"
                  },
                  {
                    "name": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT"
                  },
                  {
                    "name": "GITHUB_GET_EMOJIS"
                  },
                  {
                    "name": "GITHUB_GET_EMOJIS"
                  },
                  {
                    "name": "GITHUB_GET_FEEDS"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_META_INFORMATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_GITHUB_PAGES_BUILD"
                  },
                  {
                    "name": "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD"
                  },
                  {
                    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_GET_LARGE_FILES"
                  },
                  {
                    "name": "GITHUB_GET_LATEST_PAGES_BUILD"
                  },
                  {
                    "name": "GITHUB_GET_OCTOCAT"
                  },
                  {
                    "name": "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY"
                  },
                  {
                    "name": "GITHUB_GET_PAGE_VIEWS"
                  },
                  {
                    "name": "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION"
                  },
                  {
                    "name": "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_CLONES"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_CONTENT"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_CONTENT"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_REPOSITORY_SECRET_SECURELY"
                  },
                  {
                    "name": "GITHUB_GET_REPO_DEV_ENV_SECRET"
                  },
                  {
                    "name": "GITHUB_GET_RULES_FOR_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION"
                  },
                  {
                    "name": "GITHUB_GET_STATUS_CHECKS_PROTECTION"
                  },
                  {
                    "name": "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_TEAM_MEMBER_LEGACY"
                  },
                  {
                    "name": "GITHUB_GET_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE"
                  },
                  {
                    "name": "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY"
                  },
                  {
                    "name": "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_THE_LATEST_RELEASE"
                  },
                  {
                    "name": "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT"
                  },
                  {
                    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY"
                  },
                  {
                    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT"
                  },
                  {
                    "name": "GITHUB_GET_THE_ZEN_OF_GITHUB"
                  },
                  {
                    "name": "GITHUB_GET_TOP_REFERRAL_PATHS"
                  },
                  {
                    "name": "GITHUB_GET_TOP_REFERRAL_SOURCES"
                  },
                  {
                    "name": "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH"
                  },
                  {
                    "name": "GITHUB_GET_WORKFLOW_RUN_USAGE"
                  },
                  {
                    "name": "GITHUB_GET_WORKFLOW_USAGE"
                  },
                  {
                    "name": "GITHUB_GITHUB_API_ROOT"
                  },
                  {
                    "name": "GITHUB_GITHUB_API_ROOT"
                  },
                  {
                    "name": "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT"
                  },
                  {
                    "name": "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_ASSIGNEES"
                  },
                  {
                    "name": "GITHUB_LIST_ASSIGNEES"
                  },
                  {
                    "name": "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM"
                  },
                  {
                    "name": "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_BRANCHES"
                  },
                  {
                    "name": "GITHUB_LIST_BRANCHES"
                  },
                  {
                    "name": "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_RUN_ANNOTATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE"
                  },
                  {
                    "name": "GITHUB_LIST_CHILD_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_CHILD_TEAMS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_CLASSROOMS"
                  },
                  {
                    "name": "GITHUB_LIST_CODEOWNERS_ERRORS"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW"
                  },
                  {
                    "name": "GITHUB_LIST_COMMITS"
                  },
                  {
                    "name": "GITHUB_LIST_COMMITS"
                  },
                  {
                    "name": "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_LIST_COMMIT_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE"
                  },
                  {
                    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOYMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOYMENT_STATUSES"
                  },
                  {
                    "name": "GITHUB_LIST_DEPLOY_KEYS"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSIONS"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSION_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS"
                  },
                  {
                    "name": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENT_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_ENVIRONMENT_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_FOLLOWERS_OF_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_FORKS"
                  },
                  {
                    "name": "GITHUB_LIST_GISTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_GIST_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_GIST_COMMITS"
                  },
                  {
                    "name": "GITHUB_LIST_GIST_FORKS"
                  },
                  {
                    "name": "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_GITHUB_PAGES_BUILDS"
                  },
                  {
                    "name": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES"
                  },
                  {
                    "name": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES"
                  },
                  {
                    "name": "GITHUB_LIST_GPG_KEYS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP"
                  },
                  {
                    "name": "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_COMMENTS"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE"
                  },
                  {
                    "name": "GITHUB_LIST_MATCHING_REFERENCES"
                  },
                  {
                    "name": "GITHUB_LIST_MILESTONES"
                  },
                  {
                    "name": "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_MEMBERS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_MIGRATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_RULE_SUITES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_ORGANIZATION_WEBHOOKS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS"
                  },
                  {
                    "name": "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES"
                  },
                  {
                    "name": "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_OWNED_PACKAGE_VERSIONS"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_PENDING_TEAM_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_PROJECT_CARDS"
                  },
                  {
                    "name": "GITHUB_LIST_PROJECT_COLLABORATORS"
                  },
                  {
                    "name": "GITHUB_LIST_PROJECT_COLUMNS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_GISTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_GISTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT"
                  },
                  {
                    "name": "GITHUB_LIST_PULL_REQUESTS_FILES"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_RELEASES"
                  },
                  {
                    "name": "GITHUB_LIST_RELEASE_ASSETS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ACTIVITIES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_COLLABORATORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_COLLABORATORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_EVENTS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_INVITATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ISSUES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ISSUES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_LANGUAGES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_RULE_SUITES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECRETS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_TAGS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_VARIABLES"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_WEBHOOKS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOSITORY_WORKFLOWS"
                  },
                  {
                    "name": "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE"
                  },
                  {
                    "name": "GITHUB_LIST_REPO_ACCESS_BY_TOKEN"
                  },
                  {
                    "name": "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER"
                  },
                  {
                    "name": "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES"
                  },
                  {
                    "name": "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE"
                  },
                  {
                    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_SECURITY_MANAGER_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS"
                  },
                  {
                    "name": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_STARGAZERS"
                  },
                  {
                    "name": "GITHUB_LIST_STARGAZERS"
                  },
                  {
                    "name": "GITHUB_LIST_STARRED_GISTS"
                  },
                  {
                    "name": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED"
                  },
                  {
                    "name": "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_TEAMS"
                  },
                  {
                    "name": "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_MEMBERS"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_MEMBERS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_PROJECTS_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY"
                  },
                  {
                    "name": "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS"
                  },
                  {
                    "name": "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS"
                  },
                  {
                    "name": "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_LIST_USERS"
                  },
                  {
                    "name": "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_LIST_USER_MIGRATIONS"
                  },
                  {
                    "name": "GITHUB_LIST_USER_PROJECTS"
                  },
                  {
                    "name": "GITHUB_LIST_WATCHERS"
                  },
                  {
                    "name": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS"
                  },
                  {
                    "name": "GITHUB_LOCK_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES"
                  },
                  {
                    "name": "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS"
                  },
                  {
                    "name": "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS"
                  },
                  {
                    "name": "GITHUB_MAP_A_COMMIT_AUTHOR"
                  },
                  {
                    "name": "GITHUB_MARK_A_THREAD_AS_DONE"
                  },
                  {
                    "name": "GITHUB_MARK_A_THREAD_AS_READ"
                  },
                  {
                    "name": "GITHUB_MARK_NOTIFICATIONS_AS_READ"
                  },
                  {
                    "name": "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ"
                  },
                  {
                    "name": "GITHUB_MERGE_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_MERGE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_MOVE_A_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_MOVE_A_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_PING_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_PING_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY"
                  },
                  {
                    "name": "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER"
                  },
                  {
                    "name": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM"
                  },
                  {
                    "name": "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER"
                  },
                  {
                    "name": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER"
                  },
                  {
                    "name": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER"
                  },
                  {
                    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_REMOVE_ORG_SECRET_BY_NAME"
                  },
                  {
                    "name": "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP"
                  },
                  {
                    "name": "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET"
                  },
                  {
                    "name": "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY"
                  },
                  {
                    "name": "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_REMOVE_STATUS_CHECK_PROTECTION"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_TEAM_MEMBER_LEGACY"
                  },
                  {
                    "name": "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_REMOVE_USER_AS_A_COLLABORATOR"
                  },
                  {
                    "name": "GITHUB_RENAME_A_BRANCH"
                  },
                  {
                    "name": "GITHUB_RENDER_A_MARKDOWN_DOCUMENT"
                  },
                  {
                    "name": "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS"
                  },
                  {
                    "name": "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED"
                  },
                  {
                    "name": "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET"
                  },
                  {
                    "name": "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD"
                  },
                  {
                    "name": "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_REREQUEST_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_REREQUEST_A_CHECK_SUITE"
                  },
                  {
                    "name": "GITHUB_RESET_A_TOKEN"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION"
                  },
                  {
                    "name": "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN"
                  },
                  {
                    "name": "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS"
                  },
                  {
                    "name": "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN"
                  },
                  {
                    "name": "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_RE_RUN_A_WORKFLOW"
                  },
                  {
                    "name": "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN"
                  },
                  {
                    "name": "GITHUB_SEARCH_CODE"
                  },
                  {
                    "name": "GITHUB_SEARCH_COMMITS"
                  },
                  {
                    "name": "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS"
                  },
                  {
                    "name": "GITHUB_SEARCH_LABELS"
                  },
                  {
                    "name": "GITHUB_SEARCH_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_SEARCH_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_SEARCH_TOPICS"
                  },
                  {
                    "name": "GITHUB_SEARCH_USERS"
                  },
                  {
                    "name": "GITHUB_SET_ADMIN_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_APP_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_SET_A_THREAD_SUBSCRIPTION"
                  },
                  {
                    "name": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES"
                  },
                  {
                    "name": "GITHUB_SET_LABELS_FOR_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER"
                  },
                  {
                    "name": "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET"
                  },
                  {
                    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET"
                  },
                  {
                    "name": "GITHUB_SET_STATUS_CHECK_CONTEXTS"
                  },
                  {
                    "name": "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_SET_USER_ACCESS_RESTRICTIONS"
                  },
                  {
                    "name": "GITHUB_START_AN_IMPORT"
                  },
                  {
                    "name": "GITHUB_START_AN_ORGANIZATION_MIGRATION"
                  },
                  {
                    "name": "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_START_A_USER_MIGRATION"
                  },
                  {
                    "name": "GITHUB_STAR_A_GIST"
                  },
                  {
                    "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER"
                  },
                  {
                    "name": "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_TRANSFER_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UNBLOCK_A_USER"
                  },
                  {
                    "name": "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_UNFOLLOW_A_USER"
                  },
                  {
                    "name": "GITHUB_UNLOCK_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UNLOCK_A_USER_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UNSTAR_A_GIST"
                  },
                  {
                    "name": "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_IMPORT"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ISSUE"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ISSUE_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CHECK_RUN"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CODE_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_COMMIT_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DEPENDABOT_ALERT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_DISCUSSION_LEGACY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_GIST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_GIST_COMMENT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_LABEL"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_MILESTONE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_PROJECT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REFERENCE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_RELEASE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_RELEASE_ASSET"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_INVITATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_RULESET"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_VARIABLE"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_TEAM"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_TEAM_LEGACY"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION"
                  },
                  {
                    "name": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY"
                  },
                  {
                    "name": "GITHUB_UPDATE_BRANCH_PROTECTION"
                  },
                  {
                    "name": "GITHUB_UPDATE_GIT_LFS_PREFERENCE"
                  },
                  {
                    "name": "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE"
                  },
                  {
                    "name": "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION"
                  },
                  {
                    "name": "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES"
                  },
                  {
                    "name": "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS"
                  },
                  {
                    "name": "GITHUB_UPDATE_STATUS_CHECK_PROTECTION"
                  },
                  {
                    "name": "GITHUB_UPDATE_THE_AUTHENTICATED_USER"
                  },
                  {
                    "name": "GITHUB_UPDATE_TOKEN_ORG_ACCESS"
                  },
                  {
                    "name": "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA"
                  },
                  {
                    "name": "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED"
                  }
                ],
                "placeholder": "Select action",
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": [
                  {
                    "chosen": false,
                    "name": "GITHUB_LIST_REPOSITORY_LANGUAGES",
                    "selected": false
                  }
                ]
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=1,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "tool_name": {
                "_input_type": "ConnectionInput",
                "advanced": false,
                "button_metadata": {
                  "icon": "unplug",
                  "variant": "destructive"
                },
                "connection_link": "",
                "display_name": "Tool Name",
                "dynamic": false,
                "helper_text": "",
                "helper_text_metadata": {},
                "info": "The name of the tool to use",
                "name": "tool_name",
                "options": [
                  {
                    "icon": "confluence",
                    "link": "",
                    "name": "Confluence"
                  },
                  {
                    "icon": "discord",
                    "link": "",
                    "name": "Discord"
                  },
                  {
                    "icon": "dropbox",
                    "link": "",
                    "name": "Dropbox"
                  },
                  {
                    "icon": "github",
                    "link": "validated",
                    "name": "Github"
                  },
                  {
                    "icon": "gmail",
                    "link": "",
                    "name": "Gmail"
                  },
                  {
                    "icon": "linkedin",
                    "link": "",
                    "name": "Linkedin"
                  },
                  {
                    "icon": "notion",
                    "link": "",
                    "name": "Notion"
                  },
                  {
                    "icon": "slack",
                    "link": "",
                    "name": "Slack"
                  },
                  {
                    "icon": "youtube",
                    "link": "",
                    "name": "Youtube"
                  }
                ],
                "placeholder": "Select a tool...",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "connect",
                "value": "Github"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ComposioAPI"
        },
        "dragging": false,
        "id": "ComposioAPI-feuoE",
        "measured": {
          "height": 400,
          "width": 320
        },
        "position": {
          "x": -190.08921418690176,
          "y": -2361.2131352702654
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-GFSV6",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent Orchestrator",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "hidden": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1-mini"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant that can use tools to answer questions and perform tasks."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-GFSV6",
        "measured": {
          "height": 752,
          "width": 320
        },
        "position": {
          "x": 529.9376106890749,
          "y": -188.80392941881826
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "URLComponent-VkQbX",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": false,
            "category": "data",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Load and parse child links from a root URL recursively",
            "display_name": "URL",
            "documentation": "",
            "edited": false,
            "field_order": [
              "urls",
              "max_depth",
              "prevent_outside",
              "use_async",
              "format",
              "timeout",
              "headers"
            ],
            "frozen": false,
            "icon": "layout-template",
            "key": "URLComponent",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 2.220446049250313e-16,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\n\nimport httpx\nfrom bs4 import BeautifulSoup\nfrom langchain_community.document_loaders import RecursiveUrlLoader\nfrom loguru import logger\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs.inputs import TableInput\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.deps import get_settings_service\n\n\nclass URLComponent(Component):\n    \"\"\"A component that loads and parses child links from a root URL recursively.\"\"\"\n\n    display_name = \"URL\"\n    description = \"Load and parse child links from a root URL recursively\"\n    icon = \"layout-template\"\n    name = \"URLComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs to crawl recursively, by clicking the '+' button.\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        IntInput(\n            name=\"max_depth\",\n            display_name=\"Max Depth\",\n            info=(\n                \"Controls how many 'clicks' away from the initial page the crawler will go:\\n\"\n                \"- depth 1: only the initial page\\n\"\n                \"- depth 2: initial page + all pages linked directly from it\\n\"\n                \"- depth 3: initial page + direct links + links found on those direct link pages\\n\"\n                \"Note: This is about link traversal, not URL path depth.\"\n            ),\n            value=1,\n            required=False,\n        ),\n        BoolInput(\n            name=\"prevent_outside\",\n            display_name=\"Prevent Outside\",\n            info=(\n                \"If enabled, only crawls URLs within the same domain as the root URL. \"\n                \"This helps prevent the crawler from going to external websites.\"\n            ),\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"use_async\",\n            display_name=\"Use Async\",\n            info=(\n                \"If enabled, uses asynchronous loading which can be significantly faster \"\n                \"but might use more system resources.\"\n            ),\n            value=True,\n            required=False,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'HTML' for the raw HTML content.\",\n            options=[\"Text\", \"HTML\"],\n            value=\"Text\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request in seconds.\",\n            value=30,\n            required=False,\n            advanced=True,\n        ),\n        TableInput(\n            name=\"headers\",\n            display_name=\"Headers\",\n            info=\"The headers to send with the request\",\n            table_schema=[\n                {\n                    \"name\": \"key\",\n                    \"display_name\": \"Header\",\n                    \"type\": \"str\",\n                    \"description\": \"Header name\",\n                },\n                {\n                    \"name\": \"value\",\n                    \"display_name\": \"Value\",\n                    \"type\": \"str\",\n                    \"description\": \"Header value\",\n                },\n            ],\n            value=[{\"key\": \"User-Agent\", \"value\": get_settings_service().settings.user_agent}],\n            advanced=True,\n            input_types=[\"DataFrame\"],\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def validate_url(self, string: str) -> bool:\n        \"\"\"Validates if the given string matches URL pattern.\"\"\"\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\" r\"(www\\.)?\" r\"([a-zA-Z0-9.-]+)\" r\"(\\.[a-zA-Z]{2,})?\" r\"(:\\d+)?\" r\"(\\/[^\\s]*)?$\",\n            re.IGNORECASE,\n        )\n        return bool(url_regex.match(string))\n\n    def ensure_url(self, url: str) -> str:\n        \"\"\"Ensures the given string is a valid URL.\"\"\"\n        if not url.startswith((\"http://\", \"https://\")):\n            url = \"http://\" + url\n\n        if not self.validate_url(url):\n            error_msg = \"Invalid URL - \" + url\n            raise ValueError(error_msg)\n\n        return url\n\n    def fetch_content(self) -> list[Data]:\n        \"\"\"Load documents from the URLs.\"\"\"\n        all_docs = []\n        data = []\n        try:\n            urls = list({self.ensure_url(url.strip()) for url in self.urls if url.strip()})\n\n            no_urls_msg = \"No valid URLs provided.\"\n            if not urls:\n                raise ValueError(no_urls_msg)\n\n            # If there's only one URL, we'll make sure to propagate any errors\n            single_url = len(urls) == 1\n\n            for processed_url in urls:\n                msg = f\"Loading documents from {processed_url}\"\n                logger.info(msg)\n\n                # Create headers dictionary\n                headers_dict = {header[\"key\"]: header[\"value\"] for header in self.headers}\n\n                # Configure RecursiveUrlLoader with httpx-compatible settings\n                extractor = (lambda x: x) if self.format == \"HTML\" else (lambda x: BeautifulSoup(x, \"lxml\").get_text())\n\n                # Modified settings for RecursiveUrlLoader\n                # Note: We need to pass a compatible client or settings to RecursiveUrlLoader\n                # This will depend on how RecursiveUrlLoader is implemented\n                loader = RecursiveUrlLoader(\n                    url=processed_url,\n                    max_depth=self.max_depth,\n                    prevent_outside=self.prevent_outside,\n                    use_async=self.use_async,\n                    continue_on_failure=not single_url,\n                    extractor=extractor,\n                    timeout=self.timeout,\n                    headers=headers_dict,\n                )\n\n                try:\n                    docs = loader.load()\n                    if not docs:\n                        msg = f\"No documents found for {processed_url}\"\n                        logger.warning(msg)\n                        if single_url:\n                            message = f\"No documents found for {processed_url}\"\n                            raise ValueError(message)\n                    else:\n                        msg = f\"Found {len(docs)} documents from {processed_url}\"\n                        logger.info(msg)\n                        all_docs.extend(docs)\n                except (httpx.HTTPError, httpx.RequestError) as e:\n                    msg = f\"Error loading documents from {processed_url}: {e}\"\n                    logger.exception(msg)\n                    if single_url:\n                        raise  # Re-raise the exception if it's the only URL\n                except UnicodeDecodeError as e:\n                    msg = f\"Error decoding content from {processed_url}: {e}\"\n                    logger.error(msg)\n                    if single_url:\n                        raise  # Re-raise the exception if it's the only URL\n                except Exception as e:\n                    msg = f\"Unexpected error loading documents from {processed_url}: {e}\"\n                    logger.exception(msg)\n                    if single_url:\n                        raise  # Re-raise the exception if it's the only URL\n\n            data = [Data(text=doc.page_content, **doc.metadata) for doc in all_docs]\n            self.status = data\n\n        except Exception as e:\n            error_msg = e.message if hasattr(e, \"message\") else e\n            msg = f\"Error loading documents: {error_msg!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        \"\"\"Load documents and return their text content.\"\"\"\n        data = self.fetch_content()\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        \"\"\"Convert the documents to a DataFrame.\"\"\"\n        data_frame = DataFrame(self.fetch_content())\n        self.status = data_frame\n        return data_frame\n"
              },
              "format": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Output Format",
                "dynamic": false,
                "info": "Output Format. Use 'Text' to extract the text from the HTML or 'HTML' for the raw HTML content.",
                "name": "format",
                "options": [
                  "Text",
                  "HTML"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Text"
              },
              "headers": {
                "_input_type": "TableInput",
                "advanced": true,
                "display_name": "Headers",
                "dynamic": false,
                "info": "The headers to send with the request",
                "input_types": [
                  "DataFrame"
                ],
                "is_list": true,
                "list_add_label": "Add More",
                "name": "headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "table_icon": "Table",
                "table_schema": {
                  "columns": [
                    {
                      "default": "None",
                      "description": "Header name",
                      "disable_edit": false,
                      "display_name": "Header",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "key",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "None",
                      "description": "Header value",
                      "disable_edit": false,
                      "display_name": "Value",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "value",
                      "sortable": true,
                      "type": "str"
                    }
                  ]
                },
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": [
                  {
                    "key": "User-Agent",
                    "value": "langflow"
                  }
                ]
              },
              "max_depth": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Depth",
                "dynamic": false,
                "info": "Controls how many 'clicks' away from the initial page the crawler will go:\n- depth 1: only the initial page\n- depth 2: initial page + all pages linked directly from it\n- depth 3: initial page + direct links + links found on those direct link pages\nNote: This is about link traversal, not URL path depth.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_depth",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 2
              },
              "prevent_outside": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Prevent Outside",
                "dynamic": false,
                "info": "If enabled, only crawls URLs within the same domain as the root URL. This helps prevent the crawler from going to external websites.",
                "list": false,
                "list_add_label": "Add More",
                "name": "prevent_outside",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "Timeout for the request in seconds.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "urls": {
                        "default": "",
                        "description": "Enter one or more URLs to crawl recursively, by clicking the '+' button.",
                        "items": {
                          "type": "string"
                        },
                        "title": "Urls",
                        "type": "array"
                      }
                    },
                    "description": "URLComponent. fetch_content - Load and parse child links from a root URL recursively",
                    "display_description": "URLComponent. fetch_content - Load and parse child links from a root URL recursively",
                    "display_name": "fetch_content",
                    "name": "fetch_content",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "fetch_content"
                    ]
                  },
                  {
                    "args": {
                      "urls": {
                        "default": "",
                        "description": "Enter one or more URLs to crawl recursively, by clicking the '+' button.",
                        "items": {
                          "type": "string"
                        },
                        "title": "Urls",
                        "type": "array"
                      }
                    },
                    "description": "URLComponent. fetch_content_text - Load and parse child links from a root URL recursively",
                    "display_description": "URLComponent. fetch_content_text - Load and parse child links from a root URL recursively",
                    "display_name": "fetch_content_text",
                    "name": "fetch_content_text",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "fetch_content_text"
                    ]
                  },
                  {
                    "args": {
                      "urls": {
                        "default": "",
                        "description": "Enter one or more URLs to crawl recursively, by clicking the '+' button.",
                        "items": {
                          "type": "string"
                        },
                        "title": "Urls",
                        "type": "array"
                      }
                    },
                    "description": "URLComponent. as_dataframe - Load and parse child links from a root URL recursively",
                    "display_description": "URLComponent. as_dataframe - Load and parse child links from a root URL recursively",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "as_dataframe"
                    ]
                  }
                ]
              },
              "urls": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "URLs",
                "dynamic": false,
                "info": "Enter one or more URLs to crawl recursively, by clicking the '+' button.",
                "input_types": [
                  "Message"
                ],
                "list": true,
                "list_add_label": "Add URL",
                "load_from_db": false,
                "name": "urls",
                "placeholder": "Enter a URL...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "use_async": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Use Async",
                "dynamic": false,
                "info": "If enabled, uses asynchronous loading which can be significantly faster but might use more system resources.",
                "list": false,
                "list_add_label": "Add More",
                "name": "use_async",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "URLComponent"
        },
        "dragging": false,
        "id": "URLComponent-VkQbX",
        "measured": {
          "height": 358,
          "width": 320
        },
        "position": {
          "x": -235.36318983706434,
          "y": -1155.8676392073226
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 473.9872184640275,
      "y": 620.5782582944656,
      "zoom": 0.2
    }
  },
  "description": "Generate parameters and prompts for use with Stability and Dall-E image generation using a user's GitHub handle. \nSupported in Langflow version 1.2.0.",
  "endpoint_name": "generate_codebeast",
  "id": "426a4bd5-150e-463d-9d2f-76fdf6933a63",
  "is_component": false,
  "last_tested_version": "1.4.2",
  "name": "CODEBEASTS_v6",
  "tags": []
}