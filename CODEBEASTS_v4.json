{
  "id": "0126541d-1ec3-49da-afd2-a071d70e8e9b",
  "data": {
    "nodes": [
      {
        "id": "ChatInput-VEwpx",
        "type": "genericNode",
        "position": {
          "x": -2820.643209760557,
          "y": 545.0191044204128
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "noway54",
                "display_name": "Text",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "GitHub Handle",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "ChatInput",
          "id": "ChatInput-VEwpx"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-HTO9r",
        "type": "genericNode",
        "position": {
          "x": 2798.3897735981645,
          "y": 552.8955348120011
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_value": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "clean_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "clean_data",
                "value": true,
                "display_name": "Basic Clean Data",
                "advanced": true,
                "dynamic": false,
                "info": "Whether to clean the data",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "hidden": null,
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": false,
          "type": "ChatOutput",
          "id": "ChatOutput-HTO9r",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output"
        },
        "selected": false,
        "measured": {
          "width": 192,
          "height": 66
        },
        "dragging": false
      },
      {
        "id": "Agent-uIuCI",
        "type": "genericNode",
        "position": {
          "x": 541.502976901942,
          "y": -184.34079613691546
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": true,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "Model Provider",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": true,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "real_time_refresh": false,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "Use the GitHubDetailsAgent tool to get a user's GitHub account and number of repositories information. \nUse the CodingLanguageAgent to get coding languages used.\nIf you already have GitHub details and coding languages for a user, don't fetch them again. Just use what you have.\n\nUse that information to generate a prompt to create an image of a cute animal and representative objects with emotions.\nProvide the GitHub username, number of repositories, and their coding languages used.\nGive succinct and concise reasons why you choose each animal and/or object.\n\nImportant!!\n- If you already have GitHub details for a user in your memory, use those details instead of pulling from the GitHub API again.\n- Keep generated prompt to 400 characters or less\n- If multiple animals or objects apply, create a single chimera animal with objects that reflects a combination of all of them. There should only be one animal/object and a background.\n- Do not confuse \"Java\" and \"JavaScript\", those are two different things\n- Prompt should be optimized for image generation using the dall-e-3 model\n- Ensure to use the coding_language_animal_examples below for code to animal references. If there are many languages listed, use at least 3.\n\n<coding_language_animal_examples>\nLanguage\tAssociated Animal\nJulia\tParrot or  Duck\nAssembly\t Eagle or Falcon\nTypeScript\t Blue Jay or Kingfisher\nHaskell\tLlama or Owl\nKotlin\t Kotlin Kobra or  Squirrel\nC\tClownfish or Shark\nJava Javan Tiger or Civet Cat\nJavaScript\tRhino or  Spider\nPython\tPython Snake\nCUDA\t Ray or Shark\nHTML\tButterfly or Orb-Weaver Spider\nCSS\tPeacock or Chameleon\nJupyter Notebook\t Open Book (data science & research)\nScala\tIbex or Ram\nShell (Bash, Zsh, etc.) Terminal (command-line scripting)\nRust\t Red Crab (Ferris mascot)\nLua\tCrescent Moon (Lua’s logo)\nGo\tGopher (Go mascot)\nReScript\t Badger (unofficial)\n</coding_language_animal_examples>",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 2,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Agent",
          "id": "Agent-uIuCI",
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 747
        },
        "dragging": false
      },
      {
        "id": "StructuredOutput-B5rXo",
        "type": "genericNode",
        "position": {
          "x": 1542.6367546187375,
          "y": -252.1700277569327
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, MultilineInput, Output, TableInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.table import EditMode\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Format Instructions\",\n            info=\"The instructions to the language model for formatting the output.\",\n            value=(\n                \"You are an AI system designed to extract structured information from unstructured text.\"\n                \"Given the input_text, return a JSON object with predefined keys based on the expected structure.\"\n                \"Extract values accurately and format them according to the specified type \"\n                \"(e.g., string, integer, float, date).\"\n                \"If a value is missing or cannot be determined, return a default \"\n                \"(e.g., null, 0, or 'N/A').\"\n                \"If multiple instances of the expected structure exist within the input_text, \"\n                \"stream each as a separate JSON object.\"\n            ),\n            required=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            # TODO: remove deault value\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"[Deplrecated] Always set to True\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n        Output(name=\"structured_output_dataframe\", display_name=\"DataFrame\", method=\"as_dataframe\"),\n    ]\n\n    def build_structured_output_base(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n\n        output_model = create_model(\n            schema_name,\n            objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n        )\n\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        result = get_chat_result(\n            runnable=llm_with_structured_output,\n            system_message=self.system_prompt,\n            input_value=self.input_value,\n            config=config_dict,\n        )\n        if isinstance(result, BaseModel):\n            result = result.model_dump()\n        if \"objects\" in result:\n            return result[\"objects\"]\n        return result\n\n    def build_structured_output(self) -> Data:\n        output = self.build_structured_output_base()\n\n        return Data(results=output)\n\n    def as_dataframe(self) -> DataFrame:\n        output = self.build_structured_output_base()\n        if isinstance(output, list):\n            return DataFrame(data=output)\n        return DataFrame(data=[output])\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input message to the language model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "multiple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "multiple",
                "value": false,
                "display_name": "Generate Multiple",
                "advanced": true,
                "dynamic": false,
                "info": "[Deplrecated] Always set to True",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false
              },
              "output_schema": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Name",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the output field.",
                      "default": "field",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Description",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the output field.",
                      "default": "description of field",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "type",
                      "display_name": "Type",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "text",
                      "type": "str",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                      "default": "text",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "multiple",
                      "display_name": "Multiple",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "boolean",
                      "type": "boolean",
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "default": false,
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": [
                  {
                    "name": "coding_languages",
                    "description": "A list of coding languages used by GitHub profile",
                    "type": "text",
                    "multiple": "True"
                  },
                  {
                    "name": "prompt",
                    "description": "The generated prompt response",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "github_user_name_url",
                    "description": "The GitHub user name URL",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "num_repositories",
                    "description": "The number of GitHub repositories",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "animal_selection",
                    "description": "A list that explains why each animal or object was chosen.",
                    "type": "list",
                    "multiple": "True"
                  },
                  {
                    "name": "github_achievements",
                    "description": "GitHub achievements the user has earned",
                    "type": "text",
                    "multiple": "True"
                  }
                ],
                "display_name": "Output Schema",
                "advanced": false,
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput",
                "load_from_db": false
              },
              "schema_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "schema_name",
                "value": "",
                "display_name": "Schema Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "You are an AI system designed to extract structured information from unstructured text.Given the input_text, return a JSON object with predefined keys based on the expected structure.Extract values accurately and format them according to the specified type (e.g., string, integer, float, date).If a value is missing or cannot be determined, return a default (e.g., null, 0, or 'N/A').If multiple instances of the expected structure exist within the input_text, stream each as a separate JSON object.",
                "display_name": "Format Instructions",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The instructions to the language model for formatting the output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "icon": "braces",
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "display_name": "Structured Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_output",
                "hidden": null,
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "DataFrame"
                ],
                "selected": "DataFrame",
                "name": "structured_output_dataframe",
                "hidden": null,
                "display_name": "DataFrame",
                "method": "as_dataframe",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "llm",
              "input_value",
              "system_prompt",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "StructuredOutput",
          "id": "StructuredOutput-B5rXo",
          "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
          "display_name": "Structured Output"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 445
        },
        "dragging": false
      },
      {
        "id": "URL-RCq6k",
        "type": "genericNode",
        "position": {
          "x": -233.11319400029308,
          "y": -1084.390941912584
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Text",
                  "Raw HTML"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "format",
                "value": "Text",
                "display_name": "Output Format",
                "advanced": false,
                "dynamic": false,
                "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "urls": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": true,
                "list_add_label": "Add URL",
                "required": false,
                "placeholder": "Enter a URL...",
                "show": true,
                "name": "urls",
                "value": "",
                "display_name": "URLs",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "Specify the name of the tool.",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "Describe the purpose of the tool.",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "formatter": "text"
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "URL-fetch_content",
                    "description": "fetch_content() - Load and retrive data from specified URLs.",
                    "tags": [
                      "URL-fetch_content"
                    ]
                  },
                  {
                    "name": "URL-fetch_content_text",
                    "description": "fetch_content_text() - Load and retrive data from specified URLs.",
                    "tags": [
                      "URL-fetch_content_text"
                    ]
                  },
                  {
                    "name": "URL-as_dataframe",
                    "description": "as_dataframe() - Load and retrive data from specified URLs.",
                    "tags": [
                      "URL-as_dataframe"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "Load and retrive data from specified URLs.",
            "icon": "layout-template",
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "display_name": "URL",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "urls",
              "format"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": true,
            "category": "data",
            "key": "URL",
            "score": 2.220446049250313e-16,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "URL",
          "id": "URL-RCq6k"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 403
        },
        "dragging": false
      },
      {
        "id": "Agent-83zwC",
        "type": "genericNode",
        "position": {
          "x": 153.5100156251153,
          "y": -1074.1251339139735
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": true,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "Model Provider",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": true,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "real_time_refresh": false,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "Use the input name {github_username} to get information on the user's GitHub account, repository and coding languages used.\nProvide the GitHub username, number of repositories, and their coding languages used.\n\nUse https://api.github.com/users/{github_username} to get the number of public_repos and the user's url values.\nUse the Composio tool to get repo language details.",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 2,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "Specify the name of the tool.",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "Describe the purpose of the tool.",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "formatter": "text"
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "GitHubDetailsAgent",
                    "description": "A tool to lookup a GitHub user's details",
                    "tags": [
                      "Agent"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": true,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Agent",
          "id": "Agent-83zwC",
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 749
        },
        "dragging": false
      },
      {
        "id": "Prompt-hv2Cu",
        "type": "genericNode",
        "position": {
          "x": -228.4845939357253,
          "y": -656.3152009831966
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Use the input name {github_username} to get information on the user's GitHub account, number of repositories, and achievements.\n\nUse the tools provided to search https://api.github.com/users/{github_username} to get the number of public_repos, the user's url value, and their achievements.\n\nImportant!!\n- The number of public_repos and user's url data coming from https://api.github.com/users/{github_username} is authoritative.\n- Do not hallucinate github details. Only use the information provided from GitHub to create results.\n- If you get a 404 error for the user, return \"GitHub user does not exist\"",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "github_username": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "github_username",
                "display_name": "github_username",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Agent Instructions",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "github_username"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-hv2Cu"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 337
        },
        "dragging": false
      },
      {
        "id": "Prompt-frd2P",
        "type": "genericNode",
        "position": {
          "x": -224.6248392689615,
          "y": -1518.540960781502
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Get user's {github_username} last 20 repo details and then filter on \"language\" to get only language data.\nProvide the coding languages used in the user's repos.\n\nImportant!\n- If a language is not specified then ignore it and move on to the next item in the list\n- If you get a 404 error for the user, return \"No languages detected\"",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "github_username": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "github_username",
                "display_name": "github_username",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Agent Instructions",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "github_username"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-frd2P"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 337
        },
        "dragging": false
      },
      {
        "id": "Agent-SEMZZ",
        "type": "genericNode",
        "position": {
          "x": 158.827149662041,
          "y": -2020.669627388148
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": true,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "Model Provider",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": true,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "real_time_refresh": false,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "Use the input name {github_username} to get information on the user's GitHub account, repository and coding languages used.\nProvide the GitHub username, number of repositories, and their coding languages used.\n\nUse https://api.github.com/users/{github_username} to get the number of public_repos and the user's url values.\nUse the Composio tool to get repo language details.",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 2,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "default": "None",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "hidden": true
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "CodingLanguageAgent",
                    "description": "A tool to get the coding languages used in a user's GitHub repo",
                    "tags": [
                      "Agent"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": true,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Agent",
          "id": "Agent-SEMZZ",
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 749
        },
        "dragging": false
      },
      {
        "id": "MistralModel-oeXlG",
        "type": "genericNode",
        "position": {
          "x": 1088.2006104684228,
          "y": 296.40591111710523
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Mistral API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The Mistral API Key to use for the Mistral model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_mistralai import ChatMistralAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DropdownInput, FloatInput, IntInput, SecretStrInput, StrInput\n\n\nclass MistralAIModelComponent(LCModelComponent):\n    display_name = \"MistralAI\"\n    description = \"Generates text using MistralAI LLMs.\"\n    icon = \"MistralAI\"\n    name = \"MistralModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=[\n                \"open-mixtral-8x7b\",\n                \"open-mixtral-8x22b\",\n                \"mistral-small-latest\",\n                \"mistral-medium-latest\",\n                \"mistral-large-latest\",\n                \"codestral-latest\",\n            ],\n            value=\"codestral-latest\",\n        ),\n        StrInput(\n            name=\"mistral_api_base\",\n            display_name=\"Mistral API Base\",\n            advanced=True,\n            info=\"The base URL of the Mistral API. Defaults to https://api.mistral.ai/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Mistral API Key\",\n            info=\"The Mistral API Key to use for the Mistral model.\",\n            advanced=False,\n            required=True,\n            value=\"MISTRAL_API_KEY\",\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            advanced=False,\n            value=0.5,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            advanced=True,\n            value=60,\n        ),\n        IntInput(\n            name=\"max_concurrent_requests\",\n            display_name=\"Max Concurrent Requests\",\n            advanced=True,\n            value=3,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"random_seed\",\n            display_name=\"Random Seed\",\n            value=1,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"safe_mode\",\n            display_name=\"Safe Mode\",\n            advanced=True,\n            value=False,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            return ChatMistralAI(\n                model_name=self.model_name,\n                mistral_api_key=SecretStr(self.api_key).get_secret_value() if self.api_key else None,\n                endpoint=self.mistral_api_base or \"https://api.mistral.ai/v1\",\n                max_tokens=self.max_tokens or None,\n                temperature=self.temperature,\n                max_retries=self.max_retries,\n                timeout=self.timeout,\n                max_concurrent_requests=self.max_concurrent_requests,\n                top_p=self.top_p,\n                random_seed=self.random_seed,\n                safe_mode=self.safe_mode,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to MistralAI API.\"\n            raise ValueError(msg) from e\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "max_concurrent_requests": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_concurrent_requests",
                "value": 3,
                "display_name": "Max Concurrent Requests",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "mistral_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mistral_api_base",
                "value": "",
                "display_name": "Mistral API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the Mistral API. Defaults to https://api.mistral.ai/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "open-mixtral-8x7b",
                  "open-mixtral-8x22b",
                  "mistral-small-latest",
                  "mistral-medium-latest",
                  "mistral-large-latest",
                  "codestral-latest"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "codestral-latest",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "random_seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "random_seed",
                "value": 1,
                "display_name": "Random Seed",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "safe_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "safe_mode",
                "value": false,
                "display_name": "Safe Mode",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.2,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput",
                "load_from_db": false
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 60,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_p": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "top_p",
                "value": 1,
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generates text using MistralAI LLMs.",
            "icon": "MistralAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "MistralAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_name",
              "mistral_api_base",
              "api_key",
              "temperature",
              "max_retries",
              "timeout",
              "max_concurrent_requests",
              "top_p",
              "random_seed",
              "safe_mode"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "MistralModel",
          "id": "MistralModel-oeXlG",
          "description": "Generates text using MistralAI LLMs.",
          "display_name": "MistralAI"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 441
        },
        "dragging": false
      },
      {
        "id": "Prompt-GdaGW",
        "type": "genericNode",
        "position": {
          "x": 115.32621655821555,
          "y": 1210.6860618945664
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "<github_details>\n{github_details}\n</github_details>\n\nUse the following format example:\n<github_example_format>\n### GitHub User Information:\n- **Username**: [SonicDMG](https://github.com/SonicDMG)\n- **Public Repositories**: 30\n\n### Coding Languages Used:\nPerl, Java\n\n### Prompt for Illustration:\nCreate a whimsical chimera featuring a Python snake (representing adaptability and wisdom), a spider (symbolizing the structure of HTML), and an owl (signifying continuous learning from TypeScript). The chimera should be perched on a cozy workspace desk with a warm cup of coffee and surrounded by coding books. The background should reflect a vibrant coding environment, filled with soft gradients and subtle coding symbols, embodying the joy and passion of programming.\n</github_example_format>\n\nUse the information from languages:[], num_repositories:, and github_achievements:. Ignore \"prompt:\".\n\n{non_modified_prompt}",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "github_details": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "github_details",
                "display_name": "github_details",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "non_modified_prompt": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "non_modified_prompt",
                "display_name": "non_modified_prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "github_details",
                "non_modified_prompt"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-GdaGW"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        },
        "dragging": false
      },
      {
        "id": "ConditionalRouter-ixSPM",
        "type": "genericNode",
        "position": {
          "x": -857.0999233671546,
          "y": 277.69192813520954
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "case_sensitive",
                "value": true,
                "display_name": "Case Sensitive",
                "advanced": false,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\", \"regex\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n            self.stop(route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"false_result\")\n            return self.message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if not result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.message\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n\n            # Ensure case_sensitive is present for all other operators\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_route": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_route",
                "value": "false_result",
                "display_name": "Default Route",
                "advanced": true,
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "input_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_text",
                "value": "",
                "display_name": "Text Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "match_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "match_text",
                "value": "AI",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 10,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "message": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "message",
                "value": "",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through either route.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "operator",
                "value": "starts with",
                "display_name": "Operator",
                "advanced": false,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "split",
            "base_classes": [
              "Message"
            ],
            "display_name": "If-Else",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "true_result",
                "hidden": null,
                "display_name": "True",
                "method": "true_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "false_result",
                "hidden": null,
                "display_name": "False",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message",
              "max_iterations",
              "default_route"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "ConditionalRouter",
          "id": "ConditionalRouter-ixSPM",
          "description": "Routes an input message to a corresponding output based on text comparison.",
          "display_name": "If-Else"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 585
        },
        "dragging": false
      },
      {
        "id": "Prompt-jNVXY",
        "type": "genericNode",
        "position": {
          "x": 79.56550204267688,
          "y": -120.23828630986442
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Use the GitHubDetailsAgent tool to get a user's GitHub account and number of repositories information. \nUse the CodingLanguageAgent to get coding languages used.\n\n{non_modified_prompt}\n{false}",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "false": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "false",
                "display_name": "false",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "non_modified_prompt": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "non_modified_prompt",
                "display_name": "non_modified_prompt",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "non_modified_prompt",
                "false"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-jNVXY"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        },
        "dragging": false
      },
      {
        "id": "StructuredOutput-EvCqs",
        "type": "genericNode",
        "position": {
          "x": 1560.8058647596727,
          "y": 1238.7418923059279
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, MultilineInput, Output, TableInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.table import EditMode\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Format Instructions\",\n            info=\"The instructions to the language model for formatting the output.\",\n            value=(\n                \"You are an AI system designed to extract structured information from unstructured text.\"\n                \"Given the input_text, return a JSON object with predefined keys based on the expected structure.\"\n                \"Extract values accurately and format them according to the specified type \"\n                \"(e.g., string, integer, float, date).\"\n                \"If a value is missing or cannot be determined, return a default \"\n                \"(e.g., null, 0, or 'N/A').\"\n                \"If multiple instances of the expected structure exist within the input_text, \"\n                \"stream each as a separate JSON object.\"\n            ),\n            required=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            # TODO: remove deault value\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"[Deplrecated] Always set to True\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n        Output(name=\"structured_output_dataframe\", display_name=\"DataFrame\", method=\"as_dataframe\"),\n    ]\n\n    def build_structured_output_base(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n\n        output_model = create_model(\n            schema_name,\n            objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n        )\n\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        result = get_chat_result(\n            runnable=llm_with_structured_output,\n            system_message=self.system_prompt,\n            input_value=self.input_value,\n            config=config_dict,\n        )\n        if isinstance(result, BaseModel):\n            result = result.model_dump()\n        if \"objects\" in result:\n            return result[\"objects\"]\n        return result\n\n    def build_structured_output(self) -> Data:\n        output = self.build_structured_output_base()\n\n        return Data(results=output)\n\n    def as_dataframe(self) -> DataFrame:\n        output = self.build_structured_output_base()\n        if isinstance(output, list):\n            return DataFrame(data=output)\n        return DataFrame(data=[output])\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input message to the language model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "multiple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "multiple",
                "value": false,
                "display_name": "Generate Multiple",
                "advanced": true,
                "dynamic": false,
                "info": "[Deplrecated] Always set to True",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false
              },
              "output_schema": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Name",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the output field.",
                      "default": "field",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Description",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the output field.",
                      "default": "description of field",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "type",
                      "display_name": "Type",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "text",
                      "type": "str",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                      "default": "text",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "multiple",
                      "display_name": "Multiple",
                      "sortable": true,
                      "filterable": true,
                      "formatter": "boolean",
                      "type": "boolean",
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "default": false,
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": [
                  {
                    "name": "coding_languages",
                    "description": "A list of coding languages used by GitHub profile",
                    "type": "text",
                    "multiple": "True"
                  },
                  {
                    "name": "prompt",
                    "description": "The generated prompt response",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "github_user_name_url",
                    "description": "The GitHub user name URL",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "num_repositories",
                    "description": "The number of GitHub repositories",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "animal_selection",
                    "description": "A list that explains why each animal or object was chosen.",
                    "type": "list",
                    "multiple": "True"
                  },
                  {
                    "name": "github_achievements",
                    "description": "GitHub achievements the user has earned",
                    "type": "text",
                    "multiple": "True"
                  }
                ],
                "display_name": "Output Schema",
                "advanced": false,
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput",
                "load_from_db": false
              },
              "schema_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "schema_name",
                "value": "",
                "display_name": "Schema Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "You are an AI system designed to extract structured information from unstructured text.Given the input_text, return a JSON object with predefined keys based on the expected structure.Extract values accurately and format them according to the specified type (e.g., string, integer, float, date).If a value is missing or cannot be determined, return a default (e.g., null, 0, or 'N/A').If multiple instances of the expected structure exist within the input_text, stream each as a separate JSON object.",
                "display_name": "Format Instructions",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The instructions to the language model for formatting the output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "icon": "braces",
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "display_name": "Structured Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_output",
                "hidden": null,
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "DataFrame"
                ],
                "selected": "DataFrame",
                "name": "structured_output_dataframe",
                "hidden": null,
                "display_name": "DataFrame",
                "method": "as_dataframe",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "llm",
              "input_value",
              "system_prompt",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "StructuredOutput",
          "id": "StructuredOutput-EvCqs",
          "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
          "display_name": "Structured Output"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 445
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-osdB2",
        "type": "genericNode",
        "position": {
          "x": 2800.4260911096794,
          "y": 637.0285603680206
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_value": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "clean_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "clean_data",
                "value": true,
                "display_name": "Basic Clean Data",
                "advanced": true,
                "dynamic": false,
                "info": "Whether to clean the data",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "hidden": null,
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": false,
          "type": "ChatOutput",
          "id": "ChatOutput-osdB2",
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output"
        },
        "selected": false,
        "measured": {
          "width": 192,
          "height": 66
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-4NkLp",
        "type": "genericNode",
        "position": {
          "x": 571.198715491841,
          "y": 974.3681910955942
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-4NkLp",
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        },
        "dragging": false
      },
      {
        "id": "TextOutput-yBSb5",
        "type": "genericNode",
        "position": {
          "x": 1843.6400965062785,
          "y": 497.22041798485475
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "languages:{coding_languages}|prompt:{prompt}|github_user_name_url:{github_user_name_url}|num_repositories:{num_repositories}|animal_selection:{animal_selection}|github_achievements:{github_achievements}",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Display a text output in the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Output Payload",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "TextOutput",
          "id": "TextOutput-yBSb5"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "AstraDBChatMemory-Rdbou",
        "type": "genericNode",
        "position": {
          "x": -1837.6053870077353,
          "y": 435.69408738539886
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_endpoint": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_endpoint",
                "value": "",
                "display_name": "API Endpoint",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "API endpoint URL for the Astra DB service.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import os\n\nfrom astrapy.admin import parse_api_endpoint\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import MessageTextInput, SecretStrInput, StrInput\n\n\nclass AstraDBChatMemory(LCChatMemoryComponent):\n    display_name = \"Astra DB Chat Memory\"\n    description = \"Retrieves and store chat messages from Astra DB.\"\n    name = \"AstraDBChatMemory\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            advanced=os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\",\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        try:\n            from langchain_astradb.chat_message_histories import AstraDBChatMessageHistory\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        return AstraDBChatMessageHistory(\n            session_id=self.session_id,\n            collection_name=self.collection_name,\n            token=self.token,\n            api_endpoint=self.api_endpoint,\n            namespace=self.namespace or None,\n            environment=parse_api_endpoint(self.api_endpoint).environment,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "collection_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "collection_name",
                "value": "github_user_details",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "namespace": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "namespace",
                "value": "",
                "display_name": "Namespace",
                "advanced": true,
                "dynamic": false,
                "info": "Optional namespace within Astra DB to use for the collection.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "token": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "token",
                "value": "",
                "display_name": "Astra DB Application Token",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              }
            },
            "description": "Retrieves and store chat messages from Astra DB.",
            "icon": "AstraDB",
            "base_classes": [
              "Memory"
            ],
            "display_name": "Astra DB Chat Memory",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Memory"
                ],
                "selected": "Memory",
                "name": "memory",
                "hidden": null,
                "display_name": "Memory",
                "method": "build_message_history",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_endpoint",
                  "collection_name",
                  "token"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "namespace",
              "session_id"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "AstraDBChatMemory",
          "id": "AstraDBChatMemory-Rdbou",
          "description": "Retrieves and store chat messages from Astra DB.",
          "display_name": "Astra DB Chat Memory"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 495
        },
        "dragging": false
      },
      {
        "id": "Memory-KqJWD",
        "type": "genericNode",
        "position": {
          "x": -1439.2069915731195,
          "y": 766.2566607074538
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import aget_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n            tool_mode=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Message\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    async def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = await self.memory.aget_messages()\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = await aget_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    async def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, await self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 1,
                "display_name": "Number of Messages",
                "advanced": false,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "icon": "message-square-more",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Message History",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "messages",
                "hidden": null,
                "display_name": "Data",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "messages_text",
                "hidden": null,
                "display_name": "Message",
                "method": "retrieve_messages_as_text",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Memory",
          "id": "Memory-KqJWD",
          "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
          "display_name": "Message History"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 505
        },
        "dragging": false
      },
      {
        "id": "note-1Znfe",
        "type": "noteNode",
        "position": {
          "x": -2884.138572626521,
          "y": 415.9481240493241
        },
        "data": {
          "node": {
            "description": "# GitHub Handle \n# (App Input) \n\n\n\n\n\n\n# ->",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "lime"
            }
          },
          "type": "note",
          "id": "note-1Znfe"
        },
        "measured": {
          "width": 421,
          "height": 325
        },
        "selected": false,
        "width": 420,
        "height": 325,
        "resizing": false,
        "dragging": false
      },
      {
        "id": "note-TNWma",
        "type": "noteNode",
        "position": {
          "x": 2733.3316833140943,
          "y": 417.294534526405
        },
        "data": {
          "node": {
            "description": "# Output Payload\n# (App Output) ->",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "lime"
            }
          },
          "type": "note",
          "id": "note-TNWma"
        },
        "measured": {
          "width": 366,
          "height": 324
        },
        "selected": false,
        "dragging": false,
        "width": 365,
        "height": 324,
        "resizing": false
      },
      {
        "id": "note-AizyN",
        "type": "noteNode",
        "position": {
          "x": -1874.5440242424859,
          "y": 173.96970989808145
        },
        "data": {
          "node": {
            "description": "# Retrieve data from database\nRetrieves stored user information from Astra DB instead of the cost of agent processing and tokens on multiple runs for the same user.",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note",
          "id": "note-AizyN"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-UMMXY",
        "type": "noteNode",
        "position": {
          "x": 2960.877231251176,
          "y": -339.87418353904116
        },
        "data": {
          "node": {
            "description": "# Store user GitHub info In database\nStores the generated information in Astra DB to be used later if a user requests multiple generations.",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note",
          "id": "note-UMMXY"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-4TkUt",
        "type": "noteNode",
        "position": {
          "x": -900.1705963607237,
          "y": 53.114006243271454
        },
        "data": {
          "node": {
            "description": "# Conditional IF\n**If this is a new GitHub handle**: \n Execute full agentic flow\n\n**If user's data exists in the database**: Use stored data and process with LLM",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note",
          "id": "note-4TkUt"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-tYdl6",
        "type": "noteNode",
        "position": {
          "x": 48.44213740015539,
          "y": -244.27749068177172
        },
        "data": {
          "node": {
            "description": "# New GitHub Handle Agentic Flow",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note",
          "id": "note-tYdl6"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-byAa8",
        "type": "noteNode",
        "position": {
          "x": 90.77802183216443,
          "y": 1070.60737305716
        },
        "data": {
          "node": {
            "description": "# Existing GitHub Handle LLM Flow",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note",
          "id": "note-byAa8"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "note-URNZW",
        "type": "noteNode",
        "position": {
          "x": 167.0328007581479,
          "y": -2198.0828996321247
        },
        "data": {
          "node": {
            "description": "# Coding Language Agent\nFind the coding languages from the first 10 repos for this GitHub user",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "blue"
            }
          },
          "type": "note",
          "id": "note-URNZW"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-8VymW",
        "type": "noteNode",
        "position": {
          "x": 173.37547593674623,
          "y": -1238.661502780611
        },
        "data": {
          "node": {
            "description": "# GitHub Details Agent\nGet base GitHub handle info like URL, num repos, achievements, etc...",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "blue"
            }
          },
          "type": "note",
          "id": "note-8VymW"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "note-A3BYb",
        "type": "noteNode",
        "position": {
          "x": -247.96750543752754,
          "y": -2303.6201175722153
        },
        "data": {
          "node": {
            "description": "# Composio Tool\nUse the Composio tool for easy and authenticated access to the GitHub API.\n\n**With GitHub auth:** 5000 requests/hour\n\n**Without GitHub auth:** 60 requests/hour",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "blue"
            }
          },
          "type": "note",
          "id": "note-A3BYb"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "note-fbTEp",
        "type": "noteNode",
        "position": {
          "x": 530.8052240986749,
          "y": -349.02094064423915
        },
        "data": {
          "node": {
            "description": "# Use Agent with Tools",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note",
          "id": "note-fbTEp"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "TextInput-lDXmx",
        "type": "genericNode",
        "position": {
          "x": -378.0057628139365,
          "y": 598.7056074744656
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "Use the above information to generate a prompt to create an illustration of a cute animal chimera with emotions. Creatively blend multiple animals into a single, visually coherent chimera all combined into the the same physical body.\nAlong with the prompt, provide the GitHub username, number of repositories, and their coding languages used.\nGive succinct and concise reasons why you choose each animal and/or object and list the associated coding language.\n\nIf there isn't a GitHub profile or repositories for a user, return \"###Coding Languages Used: None ###Prompt for Illustration:Create a very cute and friendly whimsical shadow creature that \"doesn't have a GitHub repo\" in a magical scene.\". Don't hallucinate coding languages. \n\nImportant!!\n- If there are many languages, just use the top 4 when generating the prompt \n- Use the '<coding_language_animal_examples>' table to match each programming language to an animal. If you cannot find a language in the table, use OReilly animals for the language\n- Generated animals should be a combined chimera of all of the languages provided above\n- The background should be a cozy workspace filled with coding books and a warm cup of coffee, reflecting the joy and passion of programming\n- Keep generated prompt to 600 characters or less\n- Do not confuse \"Java\" and \"JavaScript\", those are two different things\n- Prompt should be optimized for image generation using the dall-e-3 model\n\n<coding_language_animal_examples>\nLanguage | Associated Animal |\n|-----------|----------------------|\n| Perl | Camel |\n| Python | Python Snake |\n| Haskell | Rhinoceros Beetle |\n| JavaScript | Rhinoceros |\n| Java | Butterfly | \n| C  | Goat | \n| Ruby | Fox | \n| PHP | Elephant | \n| SQL | Owl | \n| Unix | Tiger | \n| Julia | Parrot | \n| Assembly | Eagle | \n| TypeScript | Owl | \n| Kotlin | Cat | \n| CUDA | Dolphin  | \n| HTML | Spider | \n| CSS | Peacock | \n| Jupyter Notebook | Barn Owl | \n| Scala | Ram | \n| Shell (Bash, Zsh, etc.) | Nautilus | \n| Rust | Crab |\n| Lua | Moon | \n| Go | Gopher | \n| ReScript | Badger | \n| Elixir | Unicorn | \n| Vue.js | Chameleon |\n</coding_language_animal_examples>",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Core Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "TextInput",
          "id": "TextInput-lDXmx"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "note-WBjJj",
        "type": "noteNode",
        "position": {
          "x": 559.4196931210096,
          "y": 744.929774963959
        },
        "data": {
          "node": {
            "description": "# Use LLM only for existing data\nDecreases execution time and token/processing costs",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "rose"
            }
          },
          "type": "note",
          "id": "note-WBjJj"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "note-PQXrl",
        "type": "noteNode",
        "position": {
          "x": -2058.1900718010115,
          "y": 807.7945867776114
        },
        "data": {
          "node": {
            "description": "# ->\n\n# Session ID for testing\nThese connectors are for testing within  the Langflow UI only. Our application sets the GitHub handle as the session ID at runtime.\n\n# ->",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "transparent"
            }
          },
          "type": "note",
          "id": "note-PQXrl"
        },
        "measured": {
          "width": 324,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-PuGZv",
        "type": "noteNode",
        "position": {
          "x": 1509.9152948206222,
          "y": -443.83424163317505
        },
        "data": {
          "node": {
            "description": "# Post Process Data\nUse the Structured Output component to create consistent name:value pairs to use in the output payload",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note",
          "id": "note-PuGZv"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "dragging": false
      },
      {
        "id": "note-de2Mz",
        "type": "noteNode",
        "position": {
          "x": 1524.5934803348764,
          "y": 1024.7676772429436
        },
        "data": {
          "node": {
            "description": "# Post Process Data\nUse the Structured Output component to create consistent name:value pairs to use in the output payload",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note",
          "id": "note-de2Mz"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "note-Kdf6R",
        "type": "noteNode",
        "position": {
          "x": 1044.664478612966,
          "y": 111.0253336781021
        },
        "data": {
          "node": {
            "description": "# Fast LLM for Structured Output\nMistral's codestral-latest is a great choice for structured output speed and data quality\n",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note",
          "id": "note-Kdf6R"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "note-RVC4k",
        "type": "noteNode",
        "position": {
          "x": 1871.057692402806,
          "y": 332.17876033651214
        },
        "data": {
          "node": {
            "description": "# Create Structured Output Payload\nCreate a consistent and structured payload to send to the application\n",
            "display_name": "",
            "documentation": "",
            "template": {
              "backgroundColor": "neutral"
            }
          },
          "type": "note",
          "id": "note-RVC4k"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "StoreMessage-TCh0d",
        "type": "genericNode",
        "position": {
          "x": 2991.9365241282762,
          "y": -125.67047663991036
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "The external memory to store the message. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import HandleInput\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.memory import aget_messages, astore_message\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI\n\n\nclass MessageStoreComponent(Component):\n    display_name = \"Message Store\"\n    description = \"Stores a chat message or text into Langflow tables or an external memory.\"\n    icon = \"message-square-text\"\n    name = \"StoreMessage\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True, tool_mode=True\n        ),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"The external memory to store the message. If empty, it will use the Langflow tables.\",\n        ),\n        MessageTextInput(\n            name=\"sender\",\n            display_name=\"Sender\",\n            info=\"The sender of the message. Might be Machine or User. \"\n            \"If empty, the current sender parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"The name of the sender. Might be AI or User. If empty, the current sender parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            value=\"\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\", hidden=True),\n    ]\n\n    async def store_message(self) -> Message:\n        message = Message(text=self.message) if isinstance(self.message, str) else self.message\n\n        message.session_id = self.session_id or message.session_id\n        message.sender = self.sender or message.sender or MESSAGE_SENDER_AI\n        message.sender_name = self.sender_name or message.sender_name or MESSAGE_SENDER_NAME_AI\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = message.session_id\n            lc_message = message.to_lc_message()\n            await self.memory.aadd_messages([lc_message])\n            stored_messages = await self.memory.aget_messages()\n            stored_messages = [Message.from_lc_message(m) for m in stored_messages]\n            if message.sender:\n                stored_messages = [m for m in stored_messages if m.sender == message.sender]\n        else:\n            await astore_message(message, flow_id=self.graph.flow_id)\n            stored_messages = await aget_messages(\n                session_id=message.session_id, sender_name=message.sender_name, sender=message.sender\n            )\n        if not stored_messages:\n            msg = \"No messages were stored. Please ensure that the session ID and sender are properly set.\"\n            raise ValueError(msg)\n        stored_message = stored_messages[0]\n\n        self.status = stored_message\n        return stored_message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "message": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "message",
                "value": "",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The chat message to be stored.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "",
                "display_name": "Sender",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The sender of the message. Might be Machine or User. If empty, the current sender parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The name of the sender. Might be AI or User. If empty, the current sender parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Stores a chat message or text into Langflow tables or an external memory.",
            "icon": "message-square-text",
            "base_classes": [
              "Message"
            ],
            "display_name": "Message Store",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "stored_messages",
                "hidden": true,
                "display_name": "Stored Messages",
                "method": "store_message",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "message",
              "memory",
              "sender",
              "sender_name",
              "session_id"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "helpers",
            "key": "StoreMessage",
            "score": 0.024744838335858124,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "StoreMessage",
          "id": "StoreMessage-TCh0d"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 269
        },
        "dragging": false
      },
      {
        "id": "ParseDataFrame-QxAN8",
        "type": "genericNode",
        "position": {
          "x": 2313.6736371524016,
          "y": -211.52833025548927
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "df": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "df",
                "value": "",
                "display_name": "DataFrame",
                "advanced": false,
                "input_types": [
                  "DataFrame"
                ],
                "dynamic": false,
                "info": "The DataFrame to convert to text rows.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataFrameInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import DataFrameInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataFrameComponent(Component):\n    display_name = \"Parse DataFrame\"\n    description = (\n        \"Convert a DataFrame into plain text following a specified template. \"\n        \"Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.\"\n    )\n    icon = \"braces\"\n    name = \"ParseDataFrame\"\n\n    inputs = [\n        DataFrameInput(name=\"df\", display_name=\"DataFrame\", info=\"The DataFrame to convert to text rows.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=(\n                \"The template for formatting each row. \"\n                \"Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.\"\n            ),\n            value=\"{text}\",\n        ),\n        StrInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String that joins all row texts when building the single Text output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"All rows combined into a single text, each row formatted by the template and separated by `sep`.\",\n            method=\"parse_data\",\n        ),\n    ]\n\n    def _clean_args(self):\n        dataframe = self.df\n        template = self.template or \"{text}\"\n        sep = self.sep or \"\\n\"\n        return dataframe, template, sep\n\n    def parse_data(self) -> Message:\n        \"\"\"Converts each row of the DataFrame into a formatted string using the template.\n\n        then joins them with `sep`. Returns a single combined string as a Message.\n        \"\"\"\n        dataframe, template, sep = self._clean_args()\n\n        lines = []\n        # For each row in the DataFrame, build a dict and format\n        for _, row in dataframe.iterrows():\n            row_dict = row.to_dict()\n            text_line = template.format(**row_dict)  # e.g. template=\"{text}\", row_dict={\"text\": \"Hello\"}\n            lines.append(text_line)\n\n        # Join all lines with the provided separator\n        result_string = sep.join(lines)\n        self.status = result_string  # store in self.status for UI logs\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "String that joins all row texts when building the single Text output.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template for formatting each row. Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert a DataFrame into plain text following a specified template. Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse DataFrame",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "df",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "ParseDataFrame",
          "id": "ParseDataFrame-QxAN8"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 333
        },
        "dragging": false
      },
      {
        "id": "ParseDataFrame-PnDMm",
        "type": "genericNode",
        "position": {
          "x": 2321.4517529177906,
          "y": 1342.978214146284
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "df": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "df",
                "value": "",
                "display_name": "DataFrame",
                "advanced": false,
                "input_types": [
                  "DataFrame"
                ],
                "dynamic": false,
                "info": "The DataFrame to convert to text rows.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataFrameInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import DataFrameInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataFrameComponent(Component):\n    display_name = \"Parse DataFrame\"\n    description = (\n        \"Convert a DataFrame into plain text following a specified template. \"\n        \"Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.\"\n    )\n    icon = \"braces\"\n    name = \"ParseDataFrame\"\n\n    inputs = [\n        DataFrameInput(name=\"df\", display_name=\"DataFrame\", info=\"The DataFrame to convert to text rows.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=(\n                \"The template for formatting each row. \"\n                \"Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.\"\n            ),\n            value=\"{text}\",\n        ),\n        StrInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String that joins all row texts when building the single Text output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text\",\n            name=\"text\",\n            info=\"All rows combined into a single text, each row formatted by the template and separated by `sep`.\",\n            method=\"parse_data\",\n        ),\n    ]\n\n    def _clean_args(self):\n        dataframe = self.df\n        template = self.template or \"{text}\"\n        sep = self.sep or \"\\n\"\n        return dataframe, template, sep\n\n    def parse_data(self) -> Message:\n        \"\"\"Converts each row of the DataFrame into a formatted string using the template.\n\n        then joins them with `sep`. Returns a single combined string as a Message.\n        \"\"\"\n        dataframe, template, sep = self._clean_args()\n\n        lines = []\n        # For each row in the DataFrame, build a dict and format\n        for _, row in dataframe.iterrows():\n            row_dict = row.to_dict()\n            text_line = template.format(**row_dict)  # e.g. template=\"{text}\", row_dict={\"text\": \"Hello\"}\n            lines.append(text_line)\n\n        # Join all lines with the provided separator\n        result_string = sep.join(lines)\n        self.status = result_string  # store in self.status for UI logs\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "String that joins all row texts when building the single Text output.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template for formatting each row. Use placeholders matching column names in the DataFrame, for example '{col1}', '{col2}'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert a DataFrame into plain text following a specified template. Each column in the DataFrame is treated as a possible template key, e.g. {col_name}.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse DataFrame",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "df",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "ParseDataFrame",
          "id": "ParseDataFrame-PnDMm"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 333
        },
        "dragging": false
      },
      {
        "id": "ComposioAPI-u6Tzr",
        "type": "genericNode",
        "position": {
          "x": -224.07952546234884,
          "y": -2043.980118634413
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "auth_link": {
                "required": false,
                "placeholder": "Click to authenticate",
                "show": false,
                "name": "auth_link",
                "value": "",
                "display_name": "Authentication Link",
                "advanced": true,
                "dynamic": true,
                "info": "Click to authenticate with OAuth2",
                "title_case": false,
                "type": "link",
                "_input_type": "LinkInput",
                "load_from_db": false
              },
              "action_names": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
                  "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT",
                  "GITHUB_GET_AN_ENVIRONMENT_SECRET",
                  "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
                  "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                  "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
                  "GITHUB_SEARCH_COMMITS",
                  "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
                  "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
                  "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PROJECT_COLLABORATORS",
                  "GITHUB_SEARCH_USERS",
                  "GITHUB_CREATE_A_DISCUSSION",
                  "GITHUB_UPDATE_A_COMMIT_COMMENT",
                  "GITHUB_SET_STATUS_CHECK_CONTEXTS",
                  "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
                  "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
                  "GITHUB_UPDATE_A_TEAM_LEGACY",
                  "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
                  "GITHUB_DELETE_AN_ISSUE_REACTION",
                  "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
                  "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
                  "GITHUB_LIST_DEPLOYMENT_STATUSES",
                  "GITHUB_GET_A_GITIGNORE_TEMPLATE",
                  "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_LARGE_FILES",
                  "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
                  "GITHUB_START_AN_IMPORT",
                  "GITHUB_CANCEL_AN_IMPORT",
                  "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_LABELS_TO_AN_ISSUE",
                  "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                  "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
                  "GITHUB_GET_REPO_DEV_ENV_SECRET",
                  "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY",
                  "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
                  "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                  "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
                  "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER",
                  "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
                  "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
                  "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
                  "GITHUB_CREATE_AN_ISSUE",
                  "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
                  "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
                  "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS",
                  "GITHUB_REPO_S_CREATE_IN_ORG",
                  "GITHUB_MARK_A_THREAD_AS_READ",
                  "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_GET_COMMIT_AUTHORS",
                  "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_CHECK_SUITE",
                  "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY",
                  "GITHUB_CREATE_A_COMMIT",
                  "GITHUB_MERGE_A_BRANCH",
                  "GITHUB_GET_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
                  "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
                  "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
                  "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_GIST_COMMITS",
                  "GITHUB_GET_A_REPOSITORY_SECRET",
                  "GITHUB_LIST_ISSUE_EVENTS",
                  "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
                  "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
                  "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
                  "GITHUB_GET_A_REFERENCE",
                  "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_TEAM_BY_NAME",
                  "GITHUB_GET_A_REPOSITORY_VARIABLE",
                  "GITHUB_LIST_WATCHERS",
                  "GITHUB_DELETE_AN_APP_TOKEN",
                  "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
                  "GITHUB_GET_OCTOCAT",
                  "GITHUB_USERS_GET_CONTEXT_FOR_USER",
                  "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
                  "GITHUB_UNBLOCK_A_USER",
                  "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
                  "GITHUB_ACTIVITY_LIST_REPO_S_STARRED_BY_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                  "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
                  "GITHUB_LIST_ORGANIZATION_MEMBERS",
                  "GITHUB_LIST_REPOSITORY_VARIABLES",
                  "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM",
                  "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
                  "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_SECRETS",
                  "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
                  "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_REPOSITORY_CLONES",
                  "GITHUB_RENAME_A_BRANCH",
                  "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
                  "GITHUB_LIST_ENVIRONMENTS",
                  "GITHUB_GET_AN_ASSIGNMENT",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE",
                  "GITHUB_UPDATE_A_DISCUSSION",
                  "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS",
                  "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
                  "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_BRANCHES",
                  "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TEAMS",
                  "GITHUB_REPO_S_LIST_CONTRIBUTORS",
                  "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_META_ROOT",
                  "GITHUB_REPO_S_CREATE_FORK",
                  "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_LIST_FORKS",
                  "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
                  "GITHUB_DELETE_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
                  "GITHUB_DELETE_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_GITHUB_PAGES_BUILD",
                  "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
                  "GITHUB_UPDATE_A_REFERENCE",
                  "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
                  "GITHUB_SEARCH_LABELS",
                  "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
                  "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
                  "GITHUB_GET_A_LABEL",
                  "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
                  "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION",
                  "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_REPOSITORY_PROJECTS",
                  "GITHUB_GET_A_COMMIT_COMMENT",
                  "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
                  "GITHUB_BLOCK_A_USER",
                  "GITHUB_ISSUES_CREATE_COMMENT",
                  "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_WORKFLOW",
                  "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PULL_REQUESTS",
                  "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
                  "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REREQUEST_A_CHECK_RUN",
                  "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
                  "GITHUB_CANCEL_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY",
                  "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
                  "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
                  "GITHUB_REPO_S_LIST_FOR_AUTHENTICATED_USER",
                  "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
                  "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_UNLOCK_A_USER_REPOSITORY",
                  "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
                  "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
                  "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
                  "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
                  "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS",
                  "GITHUB_GIST_S_LIST_PUBLIC",
                  "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_USERS_LIST_EMAILS_FOR_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
                  "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
                  "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
                  "GITHUB_REPO_S_LIST_BRANCHES",
                  "GITHUB_LIST_PULL_REQUESTS_FILES",
                  "GITHUB_DELETE_A_RELEASE_ASSET",
                  "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
                  "GITHUB_GET_A_CODE_OF_CONDUCT",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_STAR_A_GIST",
                  "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
                  "GITHUB_REREQUEST_A_CHECK_SUITE",
                  "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER",
                  "GITHUB_LIST_TEAM_MEMBERS",
                  "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
                  "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
                  "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                  "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
                  "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
                  "GITHUB_GET_REPOSITORY_CONTENT",
                  "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                  "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_EVENTS",
                  "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_UPDATE_A_RELEASE",
                  "GITHUB_LIST_REPOSITORY_RULE_SUITES",
                  "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN",
                  "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                  "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER",
                  "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY",
                  "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
                  "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_LANGUAGES",
                  "GITHUB_GET_AN_APP",
                  "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_LIST_USERS",
                  "GITHUB_DELETE_AN_APP_AUTHORIZATION",
                  "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
                  "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
                  "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
                  "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
                  "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_CREATE_A_REFERENCE",
                  "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
                  "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
                  "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
                  "GITHUB_ADD_A_SECURITY_MANAGER_TEAM",
                  "GITHUB_GET_AN_ORGANIZATION",
                  "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
                  "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
                  "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
                  "GITHUB_LIST_ORGANIZATION_VARIABLES",
                  "GITHUB_CREATE_A_PROJECT_CARD",
                  "GITHUB_LIST_RELEASE_ASSETS",
                  "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_GET_STATUS_CHECKS_PROTECTION",
                  "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_USER_MIGRATIONS",
                  "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_COMMIT_COMMENT",
                  "GITHUB_GET_ALL_REPOSITORY_TOPICS",
                  "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
                  "GITHUB_DELETE_A_PROJECT",
                  "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
                  "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
                  "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
                  "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_UPDATE_A_GIST_COMMENT",
                  "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
                  "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_DELETE_A_FILE",
                  "GITHUB_GET_A_CODE_SCANNING_ALERT",
                  "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_RELEASE",
                  "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
                  "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_RELEASE_ASSET",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
                  "GITHUB_UNLOCK_AN_ISSUE",
                  "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
                  "GITHUB_GET_ALL_API_VERSIONS",
                  "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
                  "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
                  "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
                  "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_REPOSITORY",
                  "GITHUB_GET_A_BLOB",
                  "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
                  "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
                  "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
                  "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_BRANCH",
                  "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_DELETE_A_REFERENCE",
                  "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
                  "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
                  "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
                  "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
                  "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
                  "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PROJECT",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
                  "GITHUB_LIST_ASSIGNEES",
                  "GITHUB_CREATE_A_USER_PROJECT",
                  "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
                  "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY",
                  "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
                  "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
                  "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
                  "GITHUB_GET_A_GITHUB_PAGES_SITE",
                  "GITHUB_DELETE_BRANCH_PROTECTION",
                  "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
                  "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY",
                  "GITHUB_LIST_DEPLOYMENTS",
                  "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
                  "GITHUB_CREATE_A_TAG_OBJECT",
                  "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_DISCUSSION_COMMENT",
                  "GITHUB_GET_A_GIST_COMMENT",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
                  "GITHUB_ISSUES_LIST_EVENTS_FOR_REPO",
                  "GITHUB_START_A_USER_MIGRATION",
                  "GITHUB_MARK_NOTIFICATIONS_AS_READ",
                  "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
                  "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                  "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REPO_S_LIST_COLLABORATORS",
                  "GITHUB_GET_A_REPOSITORY_RULESET",
                  "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
                  "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_LABEL",
                  "GITHUB_CREATE_A_TREE",
                  "GITHUB_GET_PAGE_VIEWS",
                  "GITHUB_LIST_ENVIRONMENT_VARIABLES",
                  "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
                  "GITHUB_GET_AN_ISSUE_EVENT",
                  "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                  "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_CREATE_A_REPOSITORY_PROJECT",
                  "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                  "GITHUB_LIST_CODEOWNERS_ERRORS",
                  "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
                  "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
                  "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
                  "GITHUB_UPDATE_A_PULL_REQUEST",
                  "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
                  "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
                  "GITHUB_UNFOLLOW_A_USER",
                  "GITHUB_RE_RUN_A_WORKFLOW",
                  "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_AN_ISSUE",
                  "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
                  "GITHUB_LIST_PUBLIC_GISTS",
                  "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                  "GITHUB_CREATE_A_FORK",
                  "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_LIST_CHILD_TEAMS",
                  "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
                  "GITHUB_MAP_A_COMMIT_AUTHOR",
                  "GITHUB_SECURITY_ADVISORIES_LIST_GLOBAL_ADVISORIES",
                  "GITHUB_LIST_GIST_COMMENTS",
                  "GITHUB_GET_LATEST_PAGES_BUILD",
                  "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
                  "GITHUB_CREATE_A_DEPLOY_KEY",
                  "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
                  "GITHUB_GET_A_REPOSITORY",
                  "GITHUB_LIST_PUBLIC_REPOSITORIES",
                  "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
                  "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
                  "GITHUB_GET_A_GIST",
                  "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
                  "GITHUB_LIST_GIST_FORKS",
                  "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                  "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
                  "GITHUB_LIST_ENVIRONMENT_SECRETS",
                  "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_REPO_S_LIST_FOR_ORG",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
                  "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
                  "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
                  "GITHUB_GET_A_DISCUSSION_LEGACY",
                  "GITHUB_UPDATE_BRANCH_PROTECTION",
                  "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
                  "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
                  "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
                  "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
                  "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
                  "GITHUB_GET_AN_ISSUE",
                  "GITHUB_DELETE_A_PROJECT_COLUMN",
                  "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
                  "GITHUB_REPO_S_LIST_FOR_USER",
                  "GITHUB_LIST_ORGANIZATION_MIGRATIONS",
                  "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES",
                  "GITHUB_GET_A_PULL_REQUEST",
                  "GITHUB_LIST_SECURITY_MANAGER_TEAMS",
                  "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
                  "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS",
                  "GITHUB_GET_A_COMMIT",
                  "GITHUB_USERS_GET_BY_USERNAME",
                  "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
                  "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
                  "GITHUB_GET_A_REPOSITORY_WEBHOOK",
                  "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION",
                  "GITHUB_CREATE_A_DEPLOYMENT",
                  "GITHUB_LIST_ORGANIZATIONS",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
                  "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                  "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_TEAM_LEGACY",
                  "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_COMMIT_COMMENTS",
                  "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS",
                  "GITHUB_DELETE_A_RELEASE_REACTION",
                  "GITHUB_DELETE_A_GIST_COMMENT",
                  "GITHUB_LIST_STARGAZERS",
                  "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_GET_GITHUB_META_INFORMATION",
                  "GITHUB_SEARCH_REPOSITORIES",
                  "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT",
                  "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
                  "GITHUB_GET_ASSIGNMENT_GRADES",
                  "GITHUB_GET_A_SECRET_SCANNING_ALERT",
                  "GITHUB_GET_AN_IMPORT_STATUS",
                  "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY",
                  "GITHUB_REPO_S_CREATE_OR_UPDATE_FILE_CONTENTS",
                  "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_LIST_CHILD_TEAMS_LEGACY",
                  "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_ROLE",
                  "GITHUB_GET_A_CLASSROOM",
                  "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
                  "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
                  "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
                  "GITHUB_CREATE_A_GIST_COMMENT",
                  "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
                  "GITHUB_UPDATE_A_CHECK_RUN",
                  "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
                  "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
                  "GITHUB_LIST_ISSUE_COMMENTS",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
                  "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
                  "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
                  "GITHUB_GET_A_DEPLOYMENT_STATUS",
                  "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
                  "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS",
                  "GITHUB_DISABLE_A_WORKFLOW",
                  "GITHUB_GET_A_DEPENDABOT_ALERT",
                  "GITHUB_GET_A_MILESTONE",
                  "GITHUB_LIST_STARRED_GISTS",
                  "GITHUB_CREATE_A_BLOB",
                  "GITHUB_DELETE_A_COMMIT_COMMENT",
                  "GITHUB_GIST_S_CREATE",
                  "GITHUB_ISSUES_LIST_FOR_REPO",
                  "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ARTIFACT",
                  "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
                  "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
                  "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
                  "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
                  "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
                  "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
                  "GITHUB_LIST_PACKAGES_FOR_A_USER",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_LIST_TEAM_REPOSITORIES",
                  "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
                  "GITHUB_GET_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION",
                  "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
                  "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_AN_ENVIRONMENT",
                  "GITHUB_SET_A_THREAD_SUBSCRIPTION",
                  "GITHUB_REMOVE_TEAM_MEMBER_LEGACY",
                  "GITHUB_CREATE_A_CHECK_SUITE",
                  "GITHUB_PING_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_DISCUSSIONS",
                  "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
                  "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_ENABLE_VULNERABILITY_ALERTS",
                  "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
                  "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE",
                  "GITHUB_GET_A_THREAD",
                  "GITHUB_DOWNLOAD_AN_ARTIFACT",
                  "GITHUB_ENABLE_A_WORKFLOW",
                  "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                  "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER",
                  "GITHUB_LIST_ORGANIZATION_SECRETS",
                  "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
                  "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
                  "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
                  "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION",
                  "GITHUB_LIST_GITHUB_PAGES_BUILDS",
                  "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
                  "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
                  "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
                  "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
                  "GITHUB_GET_EMOJIS",
                  "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
                  "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
                  "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
                  "GITHUB_LIST_TEAM_PROJECTS",
                  "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                  "GITHUB_USERS_GET_AUTHENTICATED",
                  "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
                  "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_PULLS_CREATE_REVIEW",
                  "GITHUB_LIST_USER_PROJECTS",
                  "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_TEAM_LEGACY",
                  "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TEAM_PROJECTS_LEGACY",
                  "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_PROJECT_COLUMNS",
                  "GITHUB_LIST_REPOSITORY_ISSUES",
                  "GITHUB_GET_THE_LATEST_RELEASE",
                  "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
                  "GITHUB_GET_A_COMMIT_OBJECT",
                  "GITHUB_CREATE_A_DISCUSSION_LEGACY",
                  "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
                  "GITHUB_START_AN_ORGANIZATION_MIGRATION",
                  "GITHUB_EMO_J_IS_GET",
                  "GITHUB_GET_A_RELEASE_ASSET",
                  "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_PROJECT_CARD",
                  "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_TOP_REFERRAL_PATHS",
                  "GITHUB_DELETE_A_DISCUSSION",
                  "GITHUB_SET_LABELS_FOR_AN_ISSUE",
                  "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
                  "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
                  "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
                  "GITHUB_UNSTAR_A_GIST",
                  "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
                  "GITHUB_DELETE_A_RELEASE",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_WORKFLOW_RUN_USAGE",
                  "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                  "GITHUB_SEARCH_CODE",
                  "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
                  "GITHUB_LIST_REPOSITORY_WEBHOOKS",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_A_GIST",
                  "GITHUB_GET_A_DISCUSSION",
                  "GITHUB_UPDATE_A_LABEL",
                  "GITHUB_GET_A_REPOSITORY_README",
                  "GITHUB_RESET_A_TOKEN",
                  "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PACKAGE_FOR_A_USER",
                  "GITHUB_UPDATE_AN_ISSUE_COMMENT",
                  "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
                  "GITHUB_ISSUES_GET",
                  "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT",
                  "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
                  "GITHUB_PULLS_GET",
                  "GITHUB_REPO_S_LIST_COMMITS",
                  "GITHUB_LIST_TEAM_MEMBERS_LEGACY",
                  "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_DISCUSSION_COMMENT",
                  "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
                  "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
                  "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
                  "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
                  "GITHUB_LIST_PROJECT_CARDS",
                  "GITHUB_DELETE_A_REPOSITORY_RULESET",
                  "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
                  "GITHUB_CREATE_A_PULL_REQUEST",
                  "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_ALL_CODES_OF_CONDUCT",
                  "GITHUB_ADD_PROJECT_COLLABORATOR",
                  "GITHUB_GET_AN_ENVIRONMENT",
                  "GITHUB_LIST_REPOSITORY_EVENTS",
                  "GITHUB_PULLS_CREATE",
                  "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
                  "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_GIST",
                  "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
                  "GITHUB_REPO_S_GET_CONTENT",
                  "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                  "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
                  "GITHUB_SEARCH_TOPICS",
                  "GITHUB_ISSUES_CREATE",
                  "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
                  "GITHUB_TRANSFER_A_REPOSITORY",
                  "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_DISABLE_VULNERABILITY_ALERTS",
                  "GITHUB_DELETE_A_DISCUSSION_LEGACY",
                  "GITHUB_CREATE_A_GIST",
                  "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE",
                  "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
                  "GITHUB_GET_A_CHECK_RUN",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
                  "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                  "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
                  "GITHUB_CREATE_AN_ORGANIZATION_INVITATION",
                  "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES",
                  "GITHUB_UPDATE_A_MILESTONE",
                  "GITHUB_GET_A_TREE",
                  "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
                  "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_RULES_FOR_A_BRANCH",
                  "GITHUB_CHECK_A_TOKEN",
                  "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
                  "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
                  "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
                  "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
                  "GITHUB_GET_TOP_REFERRAL_SOURCES",
                  "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
                  "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
                  "GITHUB_DELETE_A_PROJECT_CARD",
                  "GITHUB_CREATE_A_PROJECT_COLUMN",
                  "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_A_RELEASE",
                  "GITHUB_GET_TEAM_MEMBER_LEGACY",
                  "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ORGANIZATION_PROJECTS",
                  "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
                  "GITHUB_UPDATE_AN_IMPORT",
                  "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                  "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
                  "GITHUB_DELETE_A_MILESTONE",
                  "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
                  "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
                  "GITHUB_DELETE_AN_ARTIFACT",
                  "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_DISCUSSION_COMMENT",
                  "GITHUB_REPO_S_GET_COMMIT",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE",
                  "GITHUB_LIST_DISCUSSION_COMMENTS",
                  "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
                  "GITHUB_UPDATE_A_REPOSITORY_RULESET",
                  "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
                  "GITHUB_LIST_REPOSITORY_TAGS",
                  "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY",
                  "GITHUB_GET_BRANCH_PROTECTION",
                  "GITHUB_COMPARE_TWO_COMMITS",
                  "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
                  "GITHUB_LIST_REPOSITORY_TEAMS",
                  "GITHUB_ISSUES_LIST_ASSIGN_EES",
                  "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_REPOSITORY_RULESET",
                  "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_GET_THE_ZEN_OF_GITHUB",
                  "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
                  "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
                  "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY",
                  "GITHUB_GET_A_USER_MIGRATION_STATUS",
                  "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
                  "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_MERGE_A_PULL_REQUEST",
                  "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
                  "GITHUB_LIST_DEPLOY_KEYS",
                  "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                  "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                  "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
                  "GITHUB_FOLLOW_A_USER",
                  "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
                  "GITHUB_ISSUES_LIST",
                  "GITHUB_PULLS_LIST",
                  "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                  "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_DEPLOY_KEY",
                  "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY",
                  "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
                  "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                  "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_LIST_GISTS_FOR_A_USER",
                  "GITHUB_MARK_A_THREAD_AS_DONE",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
                  "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
                  "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_GPG_KEYS_FOR_A_USER",
                  "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_MILESTONE",
                  "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
                  "GITHUB_DELETE_A_REPOSITORY_SECRET",
                  "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
                  "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_MOVE_A_PROJECT_COLUMN",
                  "GITHUB_UPDATE_A_PROJECT",
                  "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_ORGANIZATION_RULE_SUITES",
                  "GITHUB_GET_A_WORKFLOW_RUN",
                  "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
                  "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
                  "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
                  "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
                  "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
                  "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
                  "GITHUB_GET_A_PROJECT_COLUMN",
                  "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_REPOSITORY_WORKFLOWS",
                  "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_UPDATE_A_DISCUSSION_LEGACY",
                  "GITHUB_LIST_DISCUSSIONS_LEGACY",
                  "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
                  "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_INVITATIONS",
                  "GITHUB_GET_ALL_REPOSITORY_RULESETS",
                  "GITHUB_GET_FEEDS",
                  "GITHUB_CREATE_A_COMMIT_STATUS",
                  "GITHUB_ADD_TEAM_MEMBER_LEGACY",
                  "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY",
                  "GITHUB_MOVE_A_PROJECT_CARD",
                  "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_GET_A_DEPLOYMENT",
                  "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
                  "GITHUB_GET_A_USER",
                  "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
                  "GITHUB_SEARCH_REPO_S",
                  "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
                  "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LOCK_AN_ISSUE",
                  "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                  "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
                  "GITHUB_DELETE_A_DEPLOYMENT",
                  "GITHUB_LIST_COMMITS",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_GET_A_TAG",
                  "GITHUB_UPDATE_A_TEAM",
                  "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
                  "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
                  "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
                  "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
                  "GITHUB_FORK_A_GIST",
                  "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION",
                  "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
                  "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY",
                  "GITHUB_CREATE_AN_ISSUE_COMMENT",
                  "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
                  "GITHUB_REPO_S_GET_CONTRIBUTORS_STATS",
                  "GITHUB_DELETE_A_LABEL",
                  "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY",
                  "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
                  "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
                  "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                  "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
                  "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER",
                  "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
                  "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
                  "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
                  "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES",
                  "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
                  "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_MATCHING_REFERENCES",
                  "GITHUB_UPDATE_A_REPOSITORY",
                  "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
                  "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
                  "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_AN_ORGANIZATION_SECRET",
                  "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_REPOSITORY_COLLABORATORS",
                  "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
                  "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_USERS_LIST_FOLLOWERS_FOR_AUTHENTICATED_USER",
                  "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
                  "GITHUB_LIST_MILESTONES",
                  "GITHUB_PULLS_CHECK_IF_MERGED",
                  "GITHUB_DELETE_A_TEAM",
                  "GITHUB_DELETE_AN_ORGANIZATION",
                  "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
                  "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
                  "GITHUB_CREATE_A_CHECK_RUN",
                  "GITHUB_LIST_CLASSROOMS",
                  "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
                  "GITHUB_GITHUB_API_ROOT",
                  "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
                  "GITHUB_GET_WORKFLOW_USAGE",
                  "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
                  "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
                  "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY",
                  "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                  "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
                  "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
                  "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
                  "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_DEPLOY_KEY",
                  "GITHUB_GET_A_GIST_REVISION",
                  "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
                  "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
                  "GITHUB_LIST_FOLLOWERS_OF_A_USER",
                  "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
                  "GITHUB_CREATE_A_TEAM",
                  "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                  "GITHUB_LIST_REPOSITORY_ACTIVITIES",
                  "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
                  "GITHUB_DELETE_A_WORKFLOW_RUN",
                  "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REPO_S_GET_CODE_FREQUENCY_STATS",
                  "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
                  "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED",
                  "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
                  "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_RELEASES",
                  "GITHUB_DELETE_A_REPOSITORY_INVITATION",
                  "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
                  "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
                  "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
                  "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
                  "GITHUB_GET_A_LICENSE",
                  "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
                  "GITHUB_UPDATE_A_DEPENDABOT_ALERT",
                  "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE"
                ],
                "combobox": false,
                "list": true,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "action_names",
                "value": [
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER"
                ],
                "display_name": "Actions to use",
                "advanced": false,
                "dynamic": true,
                "info": "The actions to pass to agent to execute",
                "title_case": false,
                "type": "str",
                "_input_type": "MultiselectInput"
              },
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "real_time_refresh": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_credentials": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": false,
                "name": "app_credentials",
                "value": "",
                "display_name": "App Credentials",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": true,
                "info": "Credentials for app authentication (API Key, Password, etc)",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_names": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "ACCELO",
                  "AIRTABLE",
                  "AMAZON",
                  "APALEO",
                  "ASANA",
                  "ATLASSIAN",
                  "ATTIO",
                  "AUTH0",
                  "BATTLENET",
                  "BITBUCKET",
                  "BLACKBAUD",
                  "BLACKBOARD",
                  "BOLDSIGN",
                  "BORNEO",
                  "BOX",
                  "BRAINTREE",
                  "BREX",
                  "BREX_STAGING",
                  "BRIGHTPEARL",
                  "CALENDLY",
                  "CANVA",
                  "CANVAS",
                  "CHATWORK",
                  "CLICKUP",
                  "CONFLUENCE",
                  "CONTENTFUL",
                  "D2LBRIGHTSPACE",
                  "DEEL",
                  "DIALPAD",
                  "DISCORD",
                  "DISCORDBOT",
                  "DOCUSIGN",
                  "DROPBOX",
                  "DROPBOX_SIGN",
                  "DYNAMICS365",
                  "EPIC_GAMES",
                  "EVENTBRITE",
                  "EXIST",
                  "FACEBOOK",
                  "FIGMA",
                  "FITBIT",
                  "FRESHBOOKS",
                  "FRONT",
                  "GITHUB",
                  "GMAIL",
                  "GMAIL_BETA",
                  "GO_TO_WEBINAR",
                  "GOOGLE_ANALYTICS",
                  "GOOGLE_DRIVE_BETA",
                  "GOOGLE_MAPS",
                  "GOOGLECALENDAR",
                  "GOOGLEDOCS",
                  "GOOGLEDRIVE",
                  "GOOGLEMEET",
                  "GOOGLEPHOTOS",
                  "GOOGLESHEETS",
                  "GOOGLETASKS",
                  "GORGIAS",
                  "GUMROAD",
                  "HARVEST",
                  "HIGHLEVEL",
                  "HUBSPOT",
                  "ICIMS_TALENT_CLOUD",
                  "INTERCOM",
                  "JIRA",
                  "KEAP",
                  "KLAVIYO",
                  "KOMMO",
                  "LASTPASS",
                  "LEVER",
                  "LEVER_SANDBOX",
                  "LINEAR",
                  "LINKEDIN",
                  "LINKHUT",
                  "MAILCHIMP",
                  "MICROSOFT_TEAMS",
                  "MICROSOFT_TENANT",
                  "MIRO",
                  "MONDAY",
                  "MURAL",
                  "NETSUITE",
                  "NOTION",
                  "ONE_DRIVE",
                  "OUTLOOK",
                  "PAGERDUTY",
                  "PIPEDRIVE",
                  "PRODUCTBOARD",
                  "REDDIT",
                  "RING_CENTRAL",
                  "RIPPLING",
                  "SAGE",
                  "SALESFORCE",
                  "SEISMIC",
                  "SERVICEM8",
                  "SHARE_POINT",
                  "SHOPIFY",
                  "SLACK",
                  "SLACKBOT",
                  "SMARTRECRUITERS",
                  "SPOTIFY",
                  "SQUARE",
                  "STACK_EXCHANGE",
                  "SURVEY_MONKEY",
                  "TIMELY",
                  "TODOIST",
                  "TONEDEN",
                  "TRELLO",
                  "TWITCH",
                  "TWITTER",
                  "TWITTER_MEDIA",
                  "WAKATIME",
                  "WAVE_ACCOUNTING",
                  "WEBEX",
                  "WIZ",
                  "WRIKE",
                  "XERO",
                  "YANDEX",
                  "YNAB",
                  "YOUTUBE",
                  "ZENDESK",
                  "ZOHO",
                  "ZOHO_BIGIN",
                  "ZOHO_BOOKS",
                  "ZOHO_DESK",
                  "ZOHO_INVENTORY",
                  "ZOHO_INVOICE",
                  "ZOHO_MAIL",
                  "ZOOM"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "app_names",
                "value": "GITHUB",
                "display_name": "App Name",
                "advanced": false,
                "dynamic": false,
                "info": "The app name to use. Please refresh after selecting app name",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "auth_status": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_status",
                "value": "✅",
                "display_name": "Auth Status",
                "advanced": false,
                "dynamic": true,
                "info": "Current authentication status",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nimport requests\n\n# Third-party imports\nfrom composio.client.collections import AppAuthScheme\nfrom composio.client.exceptions import NoItemsFound\nfrom composio_langchain import Action, ComposioToolSet\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, LinkInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\nfrom langflow.io import Output\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n            required=True,\n        ),\n        # Authentication-related inputs (initially hidden)\n        SecretStrInput(\n            name=\"app_credentials\",\n            display_name=\"App Credentials\",\n            required=False,\n            dynamic=True,\n            show=False,\n            info=\"Credentials for app authentication (API Key, Password, etc)\",\n            load_from_db=False,\n        ),\n        MessageTextInput(\n            name=\"username\",\n            display_name=\"Username\",\n            required=False,\n            dynamic=True,\n            show=False,\n            info=\"Username for Basic authentication\",\n        ),\n        LinkInput(\n            name=\"auth_link\",\n            display_name=\"Authentication Link\",\n            value=\"\",\n            info=\"Click to authenticate with OAuth2\",\n            dynamic=True,\n            show=False,\n            placeholder=\"Click to authenticate\",\n        ),\n        StrInput(\n            name=\"auth_status\",\n            display_name=\"Auth Status\",\n            value=\"Not Connected\",\n            info=\"Current authentication status\",\n            dynamic=True,\n            show=False,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=True,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n            dynamic=True,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status or URL.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            # Check if user is already connected\n            entity.get_connection(app=app)\n        except NoItemsFound:\n            # Get auth scheme for the app\n            auth_scheme = self._get_auth_scheme(app)\n            return self._handle_auth_by_scheme(entity, app, auth_scheme)\n        except Exception:  # noqa: BLE001\n            logger.exception(\"Authorization error\")\n            return \"Error checking authorization\"\n        else:\n            return f\"{app} CONNECTED\"\n\n    def _get_auth_scheme(self, app_name: str) -> AppAuthScheme:\n        \"\"\"Get the primary auth scheme for an app.\n\n        Args:\n            app_name (str): The name of the app to get auth scheme for.\n\n        Returns:\n            AppAuthScheme: The auth scheme details.\n        \"\"\"\n        toolset = self._build_wrapper()\n        try:\n            return toolset.get_auth_scheme_for_app(app=app_name.lower())\n        except Exception:  # noqa: BLE001\n            logger.exception(f\"Error getting auth scheme for {app_name}\")\n            return None\n\n    def _get_oauth_apps(self, api_key: str) -> list[str]:\n        \"\"\"Fetch OAuth-enabled apps from Composio API.\n\n        Args:\n            api_key (str): The Composio API key.\n\n        Returns:\n            list[str]: A list containing OAuth-enabled app names.\n        \"\"\"\n        oauth_apps = []\n        try:\n            url = \"https://backend.composio.dev/api/v1/apps\"\n            headers = {\"x-api-key\": api_key}\n            params = {\n                \"includeLocal\": \"true\",\n                \"additionalFields\": \"auth_schemes\",\n                \"sortBy\": \"alphabet\",\n            }\n\n            response = requests.get(url, headers=headers, params=params, timeout=20)\n            data = response.json()\n\n            for item in data.get(\"items\", []):\n                for auth_scheme in item.get(\"auth_schemes\", []):\n                    if auth_scheme.get(\"mode\") in [\"OAUTH1\", \"OAUTH2\"]:\n                        oauth_apps.append(item[\"key\"].upper())\n                        break\n        except requests.RequestException as e:\n            logger.error(f\"Error fetching OAuth apps: {e}\")\n            return []\n        else:\n            return oauth_apps\n\n    def _handle_auth_by_scheme(self, entity: Any, app: str, auth_scheme: AppAuthScheme) -> str:\n        \"\"\"Handle authentication based on the auth scheme.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n            auth_scheme (AppAuthScheme): The auth scheme details.\n\n        Returns:\n            str: The authentication status or URL.\n        \"\"\"\n        auth_mode = auth_scheme.auth_mode\n\n        try:\n            # First check if already connected\n            entity.get_connection(app=app)\n        except NoItemsFound:\n            # If not connected, handle new connection based on auth mode\n            if auth_mode == \"API_KEY\":\n                if hasattr(self, \"app_credentials\") and self.app_credentials:\n                    try:\n                        entity.initiate_connection(\n                            app_name=app,\n                            auth_mode=\"API_KEY\",\n                            auth_config={\"api_key\": self.app_credentials},\n                            use_composio_auth=False,\n                            force_new_integration=True,\n                        )\n                    except Exception as e:  # noqa: BLE001\n                        logger.error(f\"Error connecting with API Key: {e}\")\n                        return \"Invalid API Key\"\n                    else:\n                        return f\"{app} CONNECTED\"\n                return \"Enter API Key\"\n\n            if (\n                auth_mode == \"BASIC\"\n                and hasattr(self, \"username\")\n                and hasattr(self, \"app_credentials\")\n                and self.username\n                and self.app_credentials\n            ):\n                try:\n                    entity.initiate_connection(\n                        app_name=app,\n                        auth_mode=\"BASIC\",\n                        auth_config={\"username\": self.username, \"password\": self.app_credentials},\n                        use_composio_auth=False,\n                        force_new_integration=True,\n                    )\n                except Exception as e:  # noqa: BLE001\n                    logger.error(f\"Error connecting with Basic Auth: {e}\")\n                    return \"Invalid credentials\"\n                else:\n                    return f\"{app} CONNECTED\"\n            elif auth_mode == \"BASIC\":\n                return \"Enter Username and Password\"\n\n            if auth_mode == \"OAUTH2\":\n                try:\n                    return self._initiate_default_connection(entity, app)\n                except Exception as e:  # noqa: BLE001\n                    logger.error(f\"Error initiating OAuth2: {e}\")\n                    return \"OAuth2 initialization failed\"\n\n            return \"Unsupported auth mode\"\n        except Exception as e:  # noqa: BLE001\n            logger.error(f\"Error checking connection status: {e}\")\n            return f\"Error: {e!s}\"\n        else:\n            return f\"{app} CONNECTED\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list({connection.appUniqueId for connection in connections})\n\n    def _get_normalized_app_name(self) -> str:\n        \"\"\"Get app name without connection status suffix.\n\n        Returns:\n            str: Normalized app name.\n        \"\"\"\n        return self.app_names.replace(\" ✅\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:  # noqa: ARG002\n        # Update the available apps options from the API\n        if hasattr(self, \"api_key\") and self.api_key != \"\":\n            toolset = self._build_wrapper()\n            build_config[\"app_names\"][\"options\"] = self._get_oauth_apps(api_key=self.api_key)\n\n        # First, ensure all dynamic fields are hidden by default\n        dynamic_fields = [\"app_credentials\", \"username\", \"auth_link\", \"auth_status\", \"action_names\"]\n        for field in dynamic_fields:\n            if field in build_config:\n                if build_config[field][\"value\"] is None or build_config[field][\"value\"] == \"\":\n                    build_config[field][\"show\"] = False\n                    build_config[field][\"advanced\"] = True\n                    build_config[field][\"load_from_db\"] = False\n                else:\n                    build_config[field][\"show\"] = True\n                    build_config[field][\"advanced\"] = False\n\n        if field_name == \"app_names\" and (not hasattr(self, \"app_names\") or not self.app_names):\n            build_config[\"auth_status\"][\"show\"] = True\n            build_config[\"auth_status\"][\"value\"] = \"Please select an app first\"\n            return build_config\n\n        if field_name == \"app_names\" and hasattr(self, \"api_key\") and self.api_key != \"\":\n            # app_name = self._get_normalized_app_name()\n            app_name = self.app_names\n            try:\n                toolset = self._build_wrapper()\n                entity = toolset.client.get_entity(id=self.entity_id)\n\n                # Always show auth_status when app is selected\n                build_config[\"auth_status\"][\"show\"] = True\n                build_config[\"auth_status\"][\"advanced\"] = False\n\n                try:\n                    # Check if already connected\n                    entity.get_connection(app=app_name)\n                    build_config[\"auth_status\"][\"value\"] = \"✅\"\n                    build_config[\"auth_link\"][\"show\"] = False\n                    # Show action selection for connected apps\n                    build_config[\"action_names\"][\"show\"] = True\n                    build_config[\"action_names\"][\"advanced\"] = False\n\n                except NoItemsFound:\n                    # Get auth scheme and show relevant fields\n                    auth_scheme = self._get_auth_scheme(app_name)\n                    auth_mode = auth_scheme.auth_mode\n                    logger.info(f\"Auth mode for {app_name}: {auth_mode}\")\n\n                    if auth_mode == \"API_KEY\":\n                        build_config[\"app_credentials\"][\"show\"] = True\n                        build_config[\"app_credentials\"][\"advanced\"] = False\n                        build_config[\"app_credentials\"][\"display_name\"] = \"API Key\"\n                        build_config[\"auth_status\"][\"value\"] = \"Enter API Key\"\n\n                    elif auth_mode == \"BASIC\":\n                        build_config[\"username\"][\"show\"] = True\n                        build_config[\"username\"][\"advanced\"] = False\n                        build_config[\"app_credentials\"][\"show\"] = True\n                        build_config[\"app_credentials\"][\"advanced\"] = False\n                        build_config[\"app_credentials\"][\"display_name\"] = \"Password\"\n                        build_config[\"auth_status\"][\"value\"] = \"Enter Username and Password\"\n\n                    elif auth_mode == \"OAUTH2\":\n                        build_config[\"auth_link\"][\"show\"] = True\n                        build_config[\"auth_link\"][\"advanced\"] = False\n                        auth_url = self._initiate_default_connection(entity, app_name)\n                        build_config[\"auth_link\"][\"value\"] = auth_url\n                        build_config[\"auth_status\"][\"value\"] = \"Click link to authenticate\"\n\n                    else:\n                        build_config[\"auth_status\"][\"value\"] = \"Unsupported auth mode\"\n\n                # Update action names if connected\n                if build_config[\"auth_status\"][\"value\"] == \"✅\":\n                    all_action_names = [str(action).replace(\"Action.\", \"\") for action in Action.all()]\n                    app_action_names = [\n                        action_name\n                        for action_name in all_action_names\n                        if action_name.lower().startswith(app_name.lower() + \"_\")\n                    ]\n                    if build_config[\"action_names\"][\"options\"] != app_action_names:\n                        build_config[\"action_names\"][\"options\"] = app_action_names\n                        build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n\n            except Exception as e:  # noqa: BLE001\n                logger.error(f\"Error checking auth status: {e}, app: {app_name}\")\n                build_config[\"auth_status\"][\"value\"] = f\"Error: {e!s}\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(actions=self.action_names)\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            logger.error(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "entity_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "entity_id",
                "value": "default",
                "display_name": "Entity ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "username": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": false,
                "name": "username",
                "value": "",
                "display_name": "Username",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": true,
                "info": "Username for Basic authentication",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Use Composio toolset to run actions with your agent",
            "icon": "Composio",
            "base_classes": [
              "Tool"
            ],
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tools",
                "hidden": null,
                "display_name": "Tools",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "entity_id",
              "api_key",
              "app_names",
              "app_credentials",
              "username",
              "auth_link",
              "auth_status",
              "action_names"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "ComposioAPI",
          "id": "ComposioAPI-u6Tzr"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 495
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Agent-uIuCI",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-uIuCIœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-B5rXo",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-B5rXoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-B5rXo",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-uIuCI",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Agent-uIuCI{œdataTypeœ:œAgentœ,œidœ:œAgent-uIuCIœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-B5rXo{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-B5rXoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "Agent-83zwC",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-83zwCœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-uIuCI",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-uIuCI",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-83zwC",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-Agent-83zwC{œdataTypeœ:œAgentœ,œidœ:œAgent-83zwCœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-uIuCI{œfieldNameœ:œtoolsœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "Prompt-hv2Cu",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-hv2Cuœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-83zwC",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-83zwCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-83zwC",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-hv2Cu",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-hv2Cu{œdataTypeœ:œPromptœ,œidœ:œPrompt-hv2Cuœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-83zwC{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-83zwCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ChatInput-VEwpx",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-hv2Cu",
        "targetHandle": "{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-hv2Cuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "github_username",
            "id": "Prompt-hv2Cu",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-VEwpx",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-VEwpx{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-hv2Cu{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-hv2Cuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ChatInput-VEwpx",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-uIuCI",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-uIuCI",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-VEwpx",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-VEwpx{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-uIuCI{œfieldNameœ:œinput_valueœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "Agent-SEMZZ",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-SEMZZœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-uIuCI",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-uIuCI",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-SEMZZ",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-Agent-SEMZZ{œdataTypeœ:œAgentœ,œidœ:œAgent-SEMZZœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-uIuCI{œfieldNameœ:œtoolsœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "Prompt-frd2P",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-frd2Pœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-SEMZZ",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-SEMZZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-SEMZZ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-frd2P",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-frd2P{œdataTypeœ:œPromptœ,œidœ:œPrompt-frd2Pœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-SEMZZ{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-SEMZZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ChatInput-VEwpx",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-frd2P",
        "targetHandle": "{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-frd2Pœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "github_username",
            "id": "Prompt-frd2P",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-VEwpx",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-VEwpx{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-frd2P{œfieldNameœ:œgithub_usernameœ,œidœ:œPrompt-frd2Pœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "URL-RCq6k",
        "sourceHandle": "{œdataTypeœ:œURLœ,œidœ:œURL-RCq6kœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-83zwC",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-83zwCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-83zwC",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "URL",
            "id": "URL-RCq6k",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-URL-RCq6k{œdataTypeœ:œURLœ,œidœ:œURL-RCq6kœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-83zwC{œfieldNameœ:œtoolsœ,œidœ:œAgent-83zwCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "MistralModel-oeXlG",
        "sourceHandle": "{œdataTypeœ:œMistralModelœ,œidœ:œMistralModel-oeXlGœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-B5rXo",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-B5rXoœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-B5rXo",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "MistralModel",
            "id": "MistralModel-oeXlG",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-MistralModel-oeXlG{œdataTypeœ:œMistralModelœ,œidœ:œMistralModel-oeXlGœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-B5rXo{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-B5rXoœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ConditionalRouter-ixSPM",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-ixSPMœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-GdaGW",
        "targetHandle": "{œfieldNameœ:œgithub_detailsœ,œidœ:œPrompt-GdaGWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "github_details",
            "id": "Prompt-GdaGW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-ixSPM",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ConditionalRouter-ixSPM{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-ixSPMœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-Prompt-GdaGW{œfieldNameœ:œgithub_detailsœ,œidœ:œPrompt-GdaGWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ConditionalRouter-ixSPM",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-ixSPMœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-jNVXY",
        "targetHandle": "{œfieldNameœ:œfalseœ,œidœ:œPrompt-jNVXYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "false",
            "id": "Prompt-jNVXY",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-ixSPM",
            "name": "false_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ConditionalRouter-ixSPM{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-ixSPMœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}-Prompt-jNVXY{œfieldNameœ:œfalseœ,œidœ:œPrompt-jNVXYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Prompt-jNVXY",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-jNVXYœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-uIuCI",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-uIuCI",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-jNVXY",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-jNVXY{œdataTypeœ:œPromptœ,œidœ:œPrompt-jNVXYœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-uIuCI{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-uIuCIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "MistralModel-oeXlG",
        "sourceHandle": "{œdataTypeœ:œMistralModelœ,œidœ:œMistralModel-oeXlGœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-EvCqs",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-EvCqsœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-EvCqs",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "MistralModel",
            "id": "MistralModel-oeXlG",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "reactflow__edge-MistralModel-oeXlG{œdataTypeœ:œMistralModelœ,œidœ:œMistralModel-oeXlGœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-EvCqs{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-EvCqsœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Memory-KqJWD",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-KqJWDœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-ixSPM",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-ixSPMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-ixSPM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-KqJWD",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Memory-KqJWD{œdataTypeœ:œMemoryœ,œidœ:œMemory-KqJWDœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-ixSPM{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-ixSPMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Memory-KqJWD",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-KqJWDœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-ixSPM",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-ixSPMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-ixSPM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-KqJWD",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Memory-KqJWD{œdataTypeœ:œMemoryœ,œidœ:œMemory-KqJWDœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-ixSPM{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-ixSPMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "TextInput-lDXmx",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-lDXmxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-jNVXY",
        "targetHandle": "{œfieldNameœ:œnon_modified_promptœ,œidœ:œPrompt-jNVXYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "non_modified_prompt",
            "id": "Prompt-jNVXY",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-lDXmx",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-lDXmx{œdataTypeœ:œTextInputœ,œidœ:œTextInput-lDXmxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-jNVXY{œfieldNameœ:œnon_modified_promptœ,œidœ:œPrompt-jNVXYœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "TextInput-lDXmx",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-lDXmxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-GdaGW",
        "targetHandle": "{œfieldNameœ:œnon_modified_promptœ,œidœ:œPrompt-GdaGWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "non_modified_prompt",
            "id": "Prompt-GdaGW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-lDXmx",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextInput-lDXmx{œdataTypeœ:œTextInputœ,œidœ:œTextInput-lDXmxœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-GdaGW{œfieldNameœ:œnon_modified_promptœ,œidœ:œPrompt-GdaGWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-VEwpx",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-4NkLp",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-4NkLpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-4NkLp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-VEwpx",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-VEwpx{œdataTypeœ:œChatInputœ,œidœ:œChatInput-VEwpxœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-4NkLp{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-4NkLpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false
      },
      {
        "source": "Prompt-GdaGW",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-GdaGWœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-4NkLp",
        "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-4NkLpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_message",
            "id": "OpenAIModel-4NkLp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-GdaGW",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-Prompt-GdaGW{œdataTypeœ:œPromptœ,œidœ:œPrompt-GdaGWœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-4NkLp{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-4NkLpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "OpenAIModel-4NkLp",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-4NkLpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-EvCqs",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-EvCqsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-EvCqs",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-4NkLp",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-OpenAIModel-4NkLp{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-4NkLpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-EvCqs{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-EvCqsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false
      },
      {
        "source": "AstraDBChatMemory-Rdbou",
        "sourceHandle": "{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-Rdbouœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}",
        "target": "Memory-KqJWD",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œMemory-KqJWDœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "Memory-KqJWD",
            "inputTypes": [
              "Memory"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AstraDBChatMemory",
            "id": "AstraDBChatMemory-Rdbou",
            "name": "memory",
            "output_types": [
              "Memory"
            ]
          }
        },
        "id": "reactflow__edge-AstraDBChatMemory-Rdbou{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-Rdbouœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}-Memory-KqJWD{œfieldNameœ:œmemoryœ,œidœ:œMemory-KqJWDœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "AstraDBChatMemory-Rdbou",
        "sourceHandle": "{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-Rdbouœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}",
        "target": "StoreMessage-TCh0d",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œStoreMessage-TCh0dœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "StoreMessage-TCh0d",
            "inputTypes": [
              "Memory"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AstraDBChatMemory",
            "id": "AstraDBChatMemory-Rdbou",
            "name": "memory",
            "output_types": [
              "Memory"
            ]
          }
        },
        "id": "reactflow__edge-AstraDBChatMemory-Rdbou{œdataTypeœ:œAstraDBChatMemoryœ,œidœ:œAstraDBChatMemory-Rdbouœ,œnameœ:œmemoryœ,œoutput_typesœ:[œMemoryœ]}-StoreMessage-TCh0d{œfieldNameœ:œmemoryœ,œidœ:œStoreMessage-TCh0dœ,œinputTypesœ:[œMemoryœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatOutput-HTO9r",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-HTO9rœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StoreMessage-TCh0d",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-TCh0dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "StoreMessage-TCh0d",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-HTO9r",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatOutput-HTO9r{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-HTO9rœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-StoreMessage-TCh0d{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-TCh0dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "StructuredOutput-B5rXo",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-B5rXoœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParseDataFrame-QxAN8",
        "targetHandle": "{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-QxAN8œ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "df",
            "id": "ParseDataFrame-QxAN8",
            "inputTypes": [
              "DataFrame"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-B5rXo",
            "name": "structured_output_dataframe",
            "output_types": [
              "DataFrame"
            ]
          }
        },
        "id": "reactflow__edge-StructuredOutput-B5rXo{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-B5rXoœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}-ParseDataFrame-QxAN8{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-QxAN8œ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "TextOutput-yBSb5",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yBSb5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ParseDataFrame-QxAN8",
        "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-QxAN8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "template",
            "id": "ParseDataFrame-QxAN8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-yBSb5",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextOutput-yBSb5{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yBSb5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseDataFrame-QxAN8{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-QxAN8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseDataFrame-QxAN8",
        "sourceHandle": "{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-QxAN8œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-HTO9r",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-HTO9rœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-HTO9r",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ParseDataFrame",
            "id": "ParseDataFrame-QxAN8",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseDataFrame-QxAN8{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-QxAN8œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-HTO9r{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-HTO9rœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "StructuredOutput-EvCqs",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-EvCqsœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParseDataFrame-PnDMm",
        "targetHandle": "{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-PnDMmœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "df",
            "id": "ParseDataFrame-PnDMm",
            "inputTypes": [
              "DataFrame"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-EvCqs",
            "name": "structured_output_dataframe",
            "output_types": [
              "DataFrame"
            ]
          }
        },
        "id": "reactflow__edge-StructuredOutput-EvCqs{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-EvCqsœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}-ParseDataFrame-PnDMm{œfieldNameœ:œdfœ,œidœ:œParseDataFrame-PnDMmœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "TextOutput-yBSb5",
        "sourceHandle": "{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yBSb5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ParseDataFrame-PnDMm",
        "targetHandle": "{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-PnDMmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "template",
            "id": "ParseDataFrame-PnDMm",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextOutput",
            "id": "TextOutput-yBSb5",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-TextOutput-yBSb5{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-yBSb5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseDataFrame-PnDMm{œfieldNameœ:œtemplateœ,œidœ:œParseDataFrame-PnDMmœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseDataFrame-PnDMm",
        "sourceHandle": "{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-PnDMmœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-osdB2",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-osdB2œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-osdB2",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ParseDataFrame",
            "id": "ParseDataFrame-PnDMm",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ParseDataFrame-PnDMm{œdataTypeœ:œParseDataFrameœ,œidœ:œParseDataFrame-PnDMmœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-osdB2{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-osdB2œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ComposioAPI-u6Tzr",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-u6Tzrœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-SEMZZ",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-SEMZZœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-SEMZZ",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-u6Tzr",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "reactflow__edge-ComposioAPI-u6Tzr{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-u6Tzrœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Agent-SEMZZ{œfieldNameœ:œtoolsœ,œidœ:œAgent-SEMZZœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "className": "",
        "animated": false
      }
    ],
    "viewport": {
      "x": 1064.9603204816203,
      "y": 761.0464098853033,
      "zoom": 0.30406727891081453
    }
  },
  "description": "Generate parameters and prompts for use with Stability and Dall-E image generation using a user's GitHub handle. \nSupported in Langflow version 1.2.0.",
  "name": "CODEBEASTS_v4",
  "last_tested_version": "1.2.0",
  "endpoint_name": "generate_codebeast",
  "is_component": false
}